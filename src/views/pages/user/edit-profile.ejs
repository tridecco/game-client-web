<!DOCTYPE html>
<html lang="en">

<head>
  <%- include("../../components/head.ejs") %>
  <title>Tridecco | Profile</title>
  <script src="<%= env.CDN_URL %>/js/user.js"></script>
</head>

<body class="h-screen overflow-hidden" style="background: #8e5e4d url('<%= env.CDN_URL %>/img/backgrounds/wooden-board.jpg') center center / cover no-repeat;">
  <!-- Tridecco Background Container -->
  <div id="board-container" class="absolute top-0 left-0 w-full h-full"></div>

  <!-- Background Overlay with Blur -->
  <div class="absolute inset-0 bg-black bg-opacity-50 backdrop-filter backdrop-blur-lg"></div>

  <!-- Centered Content Container -->
  <div class="fixed inset-0 flex items-center justify-center p-4 overflow-y-auto">
    <!-- Main Content Box -->
    <div class="bg-white bg-opacity-90 p-6 md:p-8 rounded-xl shadow-xl w-full max-w-4xl backdrop-filter backdrop-blur-md overflow-hidden flex flex-col md:flex-row max-h-[90vh]">
      <!-- Navigation Sidebar -->
      <%- include("../../components/user-sidebar.ejs", { page: "profile" }) %>

      <!-- Profile Content Area -->
      <div class="w-full md:w-3/4 lg:w-4/5 md:pl-6 overflow-y-auto" style="max-height: calc(90vh - 4rem);">
        <h2 class="text-2xl font-bold mb-6 text-amber-900">Profile Settings</h2>

        <!-- Skeleton Loader -->
        <div id="skeleton-loader" class="space-y-6">
          <!-- Skeleton for Avatar Section -->
          <div class="flex flex-col sm:flex-row items-start sm:items-center space-y-3 sm:space-y-0 sm:space-x-4 animate-pulse">
            <div class="w-20 h-20 bg-gray-300 rounded-full"></div>
            <div class="flex flex-col sm:flex-row sm:items-center gap-3">
              <div class="w-32 h-6 bg-gray-300 rounded-md"></div>
              <div class="w-24 h-6 bg-gray-300 rounded-md"></div>
            </div>
          </div>

          <!-- Skeleton for Display Name & Role -->
          <div>
            <div class="w-1/2 h-6 bg-gray-300 rounded-md mb-2"></div>
            <div class="w-full h-10 bg-gray-300 rounded-md"></div>
          </div>

          <!-- Skeleton for Gender -->
          <div>
            <div class="w-1/3 h-6 bg-gray-300 rounded-md mb-2"></div>
            <div class="flex gap-2">
              <div class="w-10 h-10 bg-gray-300 rounded-full"></div>
              <div class="w-10 h-10 bg-gray-300 rounded-full"></div>
            </div>
          </div>

          <!-- Skeleton for Rank / Elo -->
          <div>
            <div class="w-1/2 h-6 bg-gray-300 rounded-md mb-2"></div>
            <div class="flex items-center space-x-2 p-2 bg-gray-200 border border-amber-200 rounded-md">
              <div class="w-10 h-10 bg-gray-300 rounded-md"></div>
              <div class="w-1/4 h-6 bg-gray-300 rounded-md"></div>
            </div>
          </div>

          <!-- Skeleton for Level / Experience -->
          <div>
            <div class="w-1/3 h-6 bg-gray-300 rounded-md mb-2"></div>
            <div class="w-full h-10 bg-gray-300 rounded-md mb-2"></div>
            <div class="w-full h-2.5 bg-gray-300 rounded-full"></div>
          </div>

          <!-- Skeleton for Location -->
          <div>
            <div class="w-1/2 h-6 bg-gray-300 rounded-md mb-2"></div>
            <div class="w-full h-10 bg-gray-300 rounded-md"></div>
          </div>

          <!-- Skeleton for Birthday -->
          <div>
            <div class="w-1/2 h-6 bg-gray-300 rounded-md mb-2"></div>
            <div class="w-full h-10 bg-gray-300 rounded-md"></div>
          </div>

          <!-- Skeleton for Bio / About Me -->
          <div>
            <div class="w-1/2 h-6 bg-gray-300 rounded-md mb-2"></div>
            <div class="w-full h-24 bg-gray-300 rounded-md"></div>
          </div>

          <!-- Skeleton for Custom URLs -->
          <div>
            <div class="w-1/2 h-6 bg-gray-300 rounded-md mb-2"></div>
            <div class="w-full h-10 bg-gray-300 rounded-md"></div>
          </div>

          <!-- Skeleton for Form Actions -->
          <div class="flex items-center justify-end space-x-3 pt-6 border-t border-amber-700 border-opacity-30 mt-8">
            <div class="w-24 h-8 bg-gray-300 rounded-md"></div>
            <div class="w-24 h-8 bg-gray-300 rounded-md"></div>
          </div>
        </div>

        <form id="profile-form" class="space-y-6 hidden">
          <!-- Avatar Section -->
          <div class="flex flex-col sm:flex-row items-start sm:items-center space-y-3 sm:space-y-0 sm:space-x-4">
            <img id="avatar-preview" src="<%= env.CDN_URL %>/img/default-avatar.svg" alt="Avatar" class="w-20 h-20 rounded-full object-cover border-2 border-amber-600 shadow-md flex-shrink-0">
            <div class="flex flex-col sm:flex-row sm:items-center gap-3">
              <div>
                <label for="avatar-upload" class="inline-block cursor-pointer bg-amber-600 hover:bg-amber-700 text-white font-bold py-2 px-4 rounded-md text-sm transition duration-200 whitespace-nowrap">
                  Upload New Avatar
                </label>
                <input type="file" id="avatar-upload" accept="image/png, image/jpeg, image/gif" class="hidden">
              </div>
              <button type="button" id="remove-avatar-button" class="text-red-600 hover:text-red-800 text-sm font-medium px-3 py-2 rounded-md hover:bg-red-100" title="Remove Avatar (use default)">Remove</button>
            </div>
            <input type="hidden" id="remove-avatar-flag" value="false">
          </div>

          <!-- Display Name & Role -->
          <div>
            <label for="display-name" class="block text-amber-800 text-sm font-bold mb-2">
              <span id="user-role-badge-founder" class="hidden inline-block bg-amber-600 text-white text-xs font-bold px-1.5 py-0.5 rounded mr-2 align-middle">Founder</span>
              <span id="user-role-badge-developer" class="hidden inline-block bg-gray-600 text-white text-xs font-bold px-1.5 py-0.5 rounded mr-2 align-middle">Developer</span>
              <span id="user-role-badge-admin" class="hidden inline-block bg-purple-600 text-white text-xs font-bold px-1.5 py-0.5 rounded mr-2 align-middle">Admin</span>
              Display Name
            </label>
            <input type="text" id="display-name" required class="shadow-sm appearance-none border border-amber-400 rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:ring-2 focus:ring-amber-500 focus:border-transparent" placeholder="Your display name">
          </div>

          <!-- Gender -->
          <div>
            <label class="block text-amber-800 text-sm font-bold mb-2">Gender</label>
            <div id="gender-selector" class="bg-gray-200 p-1 rounded-md inline-flex gap-1">
              <button type="button" id="gender-input-f" class="p-2 rounded-sm transition-colors transition-shadow duration-200 leading-none text-lg text-pink-500" data-gender="female" title="Female">♀</button>
              <button type="button" id="gender-input-m" class="p-2 rounded-sm transition-colors transition-shadow duration-200 leading-none text-lg text-blue-500" data-gender="male" title="Male">♂</button>
            </div>
            <input type="hidden" id="gender-input">
          </div>

          <!-- Elo / Rank -->
          <div>
            <label class="block text-amber-800 text-sm font-bold mb-2">Rank / Elo</label>
            <div class="flex items-center space-x-2 p-2 bg-amber-50 border border-amber-200 rounded-md">
              <img id="rank-icon" alt="Rank" class="w-10 h-10 rounded object-contain">
              <span id="elo-rating" class="font-semibold text-lg text-amber-800">--</span>
              <span class="text-sm text-gray-600">(Not editable)</span>
            </div>
          </div>

          <!-- Level / Experience -->
          <div class="mt-4">
            <label class="block text-amber-800 text-sm font-bold mb-2">Level / Experience</label>
            <div class="p-3 bg-blue-50 border border-blue-200 rounded-md space-y-2">
              <div class="flex justify-between items-center">
                <span class="font-semibold text-lg text-blue-800">Level <span id="user-level">--</span></span>
                <span id="xp-text" class="text-sm text-blue-600">XP: -- / --</span>
              </div>
              <!-- Experience Progress Bar -->
              <div class="w-full bg-blue-200 rounded-full h-2.5 overflow-hidden">
                <div id="xp-progress-bar" class="bg-blue-600 h-2.5 rounded-full" style="width: 0%"></div>
              </div>
              <span class="text-xs text-gray-500 block text-right">(Not editable)</span>
            </div>
          </div>

          <!-- Location -->
          <div>
            <label for="location" class="block text-amber-800 text-sm font-bold mb-2">Location</label>
            <input type="text" id="location" class="shadow-sm appearance-none border border-amber-400 rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:ring-2 focus:ring-amber-500 focus:border-transparent" placeholder="City, Country">
          </div>

          <!-- Birthday -->
          <div>
            <label for="birthday" class="block text-amber-800 text-sm font-bold mb-2">Birthday</label>
            <input type="date" id="birthday" class="shadow-sm appearance-none border border-amber-400 rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:ring-2 focus:ring-amber-500 focus:border-transparent">
          </div>

          <!-- Bio / About Me -->
          <div>
            <label for="bio" class="block text-amber-800 text-sm font-bold mb-2">About Me (Optional)</label>
            <textarea id="bio" rows="3" class="shadow-sm appearance-none border border-amber-400 rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:ring-2 focus:ring-amber-500 focus:border-transparent" placeholder="Tell others a little about yourself..."></textarea>
          </div>

          <!-- Custom URLs -->
          <div>
            <label class="block text-amber-800 text-sm font-bold mb-2">Custom Links</label>
            <div id="custom-urls-container" class="space-y-2">
            </div>
            <button type="button" id="add-url-button" class="mt-2 text-sm text-amber-700 hover:text-amber-900 hover:underline font-medium flex items-center">
              <svg class="w-4 h-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6"></path>
              </svg>
              Add Link
            </button>
          </div>

          <!-- Form Actions -->
          <div class="flex items-center justify-end space-x-3 pt-6 border-t border-amber-700 border-opacity-30 mt-8">
            <button type="button" id="cancel-changes" class="bg-gray-300 hover:bg-gray-400 text-gray-800 font-bold py-2 px-5 rounded-md transition duration-200 text-sm">
              Cancel
            </button>
            <button id="save-profile" class="bg-emerald-600 hover:bg-emerald-700 text-white font-bold py-2 px-5 rounded-md focus:outline-none focus:shadow-outline transition duration-200 text-sm">
              Save Changes
            </button>
          </div>
        </form>
      </div>
    </div>
  </div>

  <!-- Include Tridecco Animator -->
  <%- include("../../components/tridecco-board-animator.ejs") %>

  <script>
    const profileForm = document.getElementById("profile-form");
    const skeletonLoader = document.getElementById("skeleton-loader");
    const saveButton = document.getElementById("save-profile");
    const cancelButton = document.getElementById("cancel-changes");
    const avatarPreview = document.getElementById("avatar-preview");
    const avatarUploadInput = document.getElementById("avatar-upload");
    const removeAvatarButton = document.getElementById("remove-avatar-button");
    const removeAvatarFlag = document.getElementById("remove-avatar-flag");
    const displayNameInput = document.getElementById("display-name");
    const userRoleBadges = {
      founder: document.getElementById("user-role-badge-founder"),
      developer: document.getElementById("user-role-badge-developer"),
      admin: document.getElementById("user-role-badge-admin")
    };
    const genderSelector = document.getElementById("gender-selector");
    const genderButtons = document.querySelectorAll("#gender-selector button");
    const genderInput = document.getElementById("gender-input");
    const rankIcon = document.getElementById("rank-icon");
    const eloRating = document.getElementById("elo-rating");
    const userLevel = document.getElementById("user-level");
    const xpText = document.getElementById("xp-text");
    const xpProgressBar = document.getElementById("xp-progress-bar");
    const xpProgressBarContainer = document.querySelector("#xp-progress-bar").parentElement;
    const xpProgressBarContainerWidth = xpProgressBarContainer.offsetWidth;
    const locationInput = document.getElementById("location");
    const birthdayInput = document.getElementById("birthday");
    const bioInput = document.getElementById("bio");
    const customUrlsContainer = document.getElementById("custom-urls-container");
    const addUrlButton = document.getElementById("add-url-button");

    // Initialize user module
    const user = new User(app);

    // Fetch user data on page load
    user.getUser().then((response) => {
      if (response.status === "success") {
        const user = response.data;
        const profile = user.profile;

        avatarPreview.src = profile.avatar || "<%= env.CDN_URL %>/img/default-avatar.svg";
        displayNameInput.value = profile.name;
        user.identities.forEach(role => {
          if (userRoleBadges[role]) {
            userRoleBadges[role].classList.remove("hidden");
          }
        });
        switch (profile.gender) {
          case false:
            genderButtons[0].classList.add("bg-pink-100");
            break;
          case true:
            genderButtons[1].classList.add("bg-blue-100");
            break;
          default:
            genderButtons[0].classList.remove("bg-pink-100");
            genderButtons[1].classList.remove("bg-blue-100");
        }
        genderInput.value = profile.gender;
        const eloRank = app.utils.getRank(user.elo.rating);
        rankIcon.src = `<%= env.CDN_URL %>/img/ranks/nobg/${eloRank.name.split(" ")[0].toLowerCase()}.png`;
        eloRating.textContent = `${user.elo.rating} (${eloRank.name})`;
        const level = app.utils.getLevel(user.experience);
        userLevel.textContent = `${level.level} (${level.title})`;
        userLevel.style.color = level.color;
        xpText.textContent = `XP: ${user.experience} / ${level.nextLevelXp}`;
        xpProgressBar.style.width = `${level.progress}%`;
        xpProgressBar.style.backgroundColor = level.color;
        locationInput.value = profile.location || "";
        birthdayInput.value = profile.birthday ? new Date(profile.birthday).toISOString().split("T")[0] : "";
        bioInput.value = profile.bio || "";
        if (profile.customizeUrls) {
          profile.customizeUrls.forEach(url => {
            const urlDiv = document.createElement("div");
            urlDiv.className = "flex items-center space-x-2";
            const urlInput = document.createElement("input");
            urlInput.type = "text";
            urlInput.value = url;
            urlInput.className = "shadow-sm appearance-none border border-amber-400 rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:ring-2 focus:ring-amber-500 focus:border-transparent";
            const removeButton = document.createElement("button");
            removeButton.type = "button";
            removeButton.className = "text-red-600 hover:text-red-800 text-sm font-medium px-3 py-2 rounded-md hover:bg-red-100";
            removeButton.textContent = "Remove";
            removeButton.addEventListener("click", () => {
              customUrlsContainer.removeChild(urlDiv);
            });
            urlDiv.appendChild(urlInput);
            urlDiv.appendChild(removeButton);
            customUrlsContainer.appendChild(urlDiv);
          });
        }

        skeletonLoader.classList.add("hidden");
        profileForm.classList.remove("hidden");
      }
    });

    // Handle avatar upload
    avatarUploadInput.addEventListener("change", (event) => {
      const file = event.target.files[0];
      if (file) {
        const reader = new FileReader();
        reader.onload = function(e) {
          avatarPreview.src = e.target.result;
          removeAvatarFlag.value = "false";
        };
        reader.readAsDataURL(file);
      }
    });

    // Handle gender selection
    genderButtons.forEach(button => {
      button.addEventListener("click", () => {
        const isSelected = button.classList.contains("bg-pink-100") || button.classList.contains("bg-blue-100");
        genderButtons.forEach(btn => btn.classList.remove("bg-pink-100", "bg-blue-100"));
        if (isSelected) {
          genderInput.value = null;
        } else {
          const selectedGender = button.dataset.gender;
          if (selectedGender === "female") {
            button.classList.add("bg-pink-100");
            genderInput.value = false;
          } else if (selectedGender === "male") {
            button.classList.add("bg-blue-100");
            genderInput.value = true;
          }
        }
      });
    });

    // Handle avatar removal
    removeAvatarButton.addEventListener("click", () => {
      avatarPreview.src = "<%= env.CDN_URL %>/img/default-avatar.svg";
      removeAvatarFlag.value = "true";
    });

    // Handle custom URL addition
    addUrlButton.addEventListener("click", () => {
      if (customUrlsContainer.children.length >= 5) {
        app.ui.alert(
          "You can only add up to 5 custom URLs.",
          "warning",
          3000,
        );
        return;
      }
      const urlDiv = document.createElement("div");
      urlDiv.className = "flex items-center space-x-2";
      const urlInput = document.createElement("input");
      urlInput.type = "text";
      urlInput.placeholder = "https://example.com";
      urlInput.className = "shadow-sm appearance-none border border-amber-400 rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:ring-2 focus:ring-amber-500 focus:border-transparent";
      const removeButton = document.createElement("button");
      removeButton.type = "button";
      removeButton.className = "text-red-600 hover:text-red-800 text-sm font-medium px-3 py-2 rounded-md hover:bg-red-100";
      removeButton.textContent = "Remove";
      removeButton.addEventListener("click", () => {
        customUrlsContainer.removeChild(urlDiv);
      });
      urlDiv.appendChild(urlInput);
      urlDiv.appendChild(removeButton);
      customUrlsContainer.appendChild(urlDiv);
    });

    // Handle profile save
    saveButton.addEventListener("click", async (event) => {
      event.preventDefault(); // Prevent form submission

      if (!app.online) {
        app.ui.alert(
          "You are offline. Please check your internet connection.",
          "warning",
          3000,
        );
        return;
      }

      saveButton.disabled = true; // Disable button during processing

      const profileData = {
        avatar: removeAvatarFlag.value === "true" ? null : avatarPreview.src,
        name: displayNameInput.value.trim(),
        gender: genderInput.value === "" ? null : genderInput.value === "true",
        location: locationInput.value.trim(),
        birthday: birthdayInput.value || null,
        bio: bioInput.value.trim(),
        customizeUrls: Array.from(customUrlsContainer.children).map(child => child.querySelector("input").value.trim())
      };

      const response = await user.updateProfile(profileData);
      if (response.status === "success") {
        app.ui.notification(
          "alert",
          response.message,
          "success",
          profileForm,
          "profile",
          true
        );

        setTimeout(() => {
          app.location.redirect("/user");
        }, 2000);
      } else {
        app.ui.notification(
          "alert",
          response.message,
          "error",
          profileForm,
          "profile",
          true
        );
        saveButton.disabled = false; // Re-enable button on error
      }
    });

    // Handle cancel button
    cancelButton.addEventListener("click", () => {
      app.location.redirect("/user");
    });
  </script>
</body>

</html>