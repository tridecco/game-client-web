<!DOCTYPE html>
<html lang="en">

<head>
  <%- include("../../components/head.ejs") %>
  <title>Tridecco | Account Settings</title>
  <script src="<%= env.CDN_URL %>/js/user.js"></script>
</head>

<body class="h-screen overflow-hidden" style="background: url('<%= env.CDN_URL %>/img/backgrounds/wooden-board.jpg') center center / cover no-repeat;">
  <!-- Tridecco Background Container -->
  <div id="board-container" class="absolute top-0 left-0 w-full h-full"></div>

  <!-- Background Overlay with Blur -->
  <div class="absolute inset-0 bg-black bg-opacity-50 backdrop-filter backdrop-blur-lg"></div>

  <!-- Centered Content Container -->
  <div class="fixed inset-0 flex items-center justify-center p-4 overflow-y-auto">
    <!-- Main Content Box -->
    <div class="bg-white bg-opacity-90 p-6 md:p-8 rounded-xl shadow-xl w-full max-w-4xl backdrop-filter backdrop-blur-md overflow-hidden flex flex-col md:flex-row max-h-[90vh]">
      <!-- Navigation Sidebar -->
      <%- include("../../components/user-sidebar.ejs", { page: "account" }) %>

      <!-- Account Content Area -->
      <div class="w-full md:w-3/4 lg:w-4/5 md:pl-6 overflow-y-auto" style="max-height: calc(90vh - 4rem);">
        <h2 class="text-2xl font-bold mb-6 text-amber-900">Account Settings</h2>

        <!-- Skeleton Loader -->
        <div id="skeleton-loader" class="space-y-6">
          <!-- Skeleton for Change Username Section -->
          <div class="space-y-4">
            <div class="h-6 bg-gray-200 animate-pulse rounded w-1/3"></div>
            <div class="h-10 bg-gray-200 animate-pulse rounded"></div>
            <div class="h-10 bg-gray-200 animate-pulse rounded w-2/3"></div>
            <div class="h-8 bg-gray-200 animate-pulse rounded w-1/3"></div>
          </div>

          <hr class="border-amber-200">

          <!-- Skeleton for Change Email Section -->
          <div class="space-y-4">
            <div class="h-6 bg-gray-200 animate-pulse rounded w-1/3"></div>
            <div class="h-10 bg-gray-200 animate-pulse rounded"></div>
            <div class="h-10 bg-gray-200 animate-pulse rounded w-2/3"></div>
            <div class="h-6 bg-gray-200 animate-pulse rounded w-1/2"></div>
            <div class="h-8 bg-gray-200 animate-pulse rounded w-1/3"></div>
          </div>

          <hr class="border-amber-200">

          <!-- Skeleton for Change Password Section -->
          <div class="space-y-4">
            <div class="h-6 bg-gray-200 animate-pulse rounded w-1/3"></div>
            <div class="h-10 bg-gray-200 animate-pulse rounded"></div>
            <div class="h-10 bg-gray-200 animate-pulse rounded w-2/3"></div>
            <div class="h-10 bg-gray-200 animate-pulse rounded w-2/3"></div>
            <div class="h-8 bg-gray-200 animate-pulse rounded w-1/3"></div>
          </div>
        </div>

        <!-- Account Area -->
        <div id="account-area" class="space-y-8 hidden">

          <!-- Change Username Section -->
          <form id="username-form" class="space-y-4">
            <h3 class="text-lg font-semibold text-amber-800 border-b border-amber-300 pb-2">Change Username</h3>
            <div>
              <label for="username" class="block text-amber-800 text-sm font-bold mb-2">New Username</label>
              <input type="text" id="username" required class="shadow-sm appearance-none border border-amber-400 rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:ring-2 focus:ring-amber-500 focus:border-transparent" placeholder="Enter new username">
            </div>
            <div class="flex justify-end">
              <button id="save-username" class="bg-emerald-600 hover:bg-emerald-700 text-white font-bold py-2 px-5 rounded-md focus:outline-none focus:shadow-outline transition duration-200 text-sm">
                Update Username
              </button>
            </div>
          </form>

          <hr class="border-amber-200">

          <!-- Change Email Section -->
          <form id="email-form" class="space-y-4">
            <h3 class="text-lg font-semibold text-amber-800 border-b border-amber-300 pb-2">Change Email</h3>
            <div>
              <label for="email" class="block text-amber-800 text-sm font-bold mb-2">New Email Address</label>
              <input type="email" id="email" required class="shadow-sm appearance-none border border-amber-400 rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:ring-2 focus:ring-amber-500 focus:border-transparent" placeholder="Enter new email address">
              <p class="text-xs text-gray-600 mt-1">A confirmation link will be sent to your new email address.</p>
            </div>
            <div class="flex justify-end">
              <button id="save-email" class="bg-emerald-600 hover:bg-emerald-700 text-white font-bold py-2 px-5 rounded-md focus:outline-none focus:shadow-outline transition duration-200 text-sm">
                Update Email
              </button>
            </div>
          </form>

          <hr class="border-amber-200">

          <!-- Change Password Section -->
          <form id="password-form" class="space-y-4">
            <h3 class="text-lg font-semibold text-amber-800 border-b border-amber-300 pb-2">Change Password</h3>
            <div>
              <label for="current-password" class="block text-amber-800 text-sm font-bold mb-2">Current Password</label>
              <input type="password" id="current-password" required class="shadow-sm appearance-none border border-amber-400 rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:ring-2 focus:ring-amber-500 focus:border-transparent" placeholder="Enter your current password">
            </div>
            <div>
              <label for="new-password" class="block text-amber-800 text-sm font-bold mb-2">New Password</label>
              <input type="password" id="new-password" required class="shadow-sm appearance-none border border-amber-400 rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:ring-2 focus:ring-amber-500 focus:border-transparent" placeholder="Enter new password">
            </div>
            <div>
              <label for="confirm-password" class="block text-amber-800 text-sm font-bold mb-2">Confirm New Password</label>
              <input type="password" id="confirm-password" required class="shadow-sm appearance-none border border-amber-400 rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:ring-2 focus:ring-amber-500 focus:border-transparent" placeholder="Confirm new password">
            </div>
            <div class="flex justify-end">
              <button id="save-password" class="bg-emerald-600 hover:bg-emerald-700 text-white font-bold py-2 px-5 rounded-md focus:outline-none focus:shadow-outline transition duration-200 text-sm">
                Update Password
              </button>
            </div>
          </form>

        </div>
      </div>
    </div>
  </div>

  <!-- Include Tridecco Animator -->
  <%- include("../../components/tridecco-board-animator.ejs") %>

  <script>
    const accountArea = document.getElementById("account-area");
    const skeletonLoader = document.getElementById("skeleton-loader");

    const usernameForm = document.getElementById("username-form");
    const usernameInput = document.getElementById("username");
    const saveUsernameButton = document.getElementById("save-username");

    const emailForm = document.getElementById("email-form");
    const emailInput = document.getElementById("email");
    const saveEmailButton = document.getElementById("save-email");

    const passwordForm = document.getElementById("password-form");
    const currentPasswordInput = document.getElementById("current-password");
    const newPasswordInput = document.getElementById("new-password");
    const confirmPasswordInput = document.getElementById("confirm-password");
    const savePasswordButton = document.getElementById("save-password");

    // Initialize user module
    const user = new User(app);

    // Load account settings
    user.getUser().then((response) => {
      if (response.status === "success") {
        const user = response.data;

        usernameInput.value = user.username;
        emailInput.value = user.email;

        if (user.password === null) {
          currentPasswordInput.parentElement.classList.add("hidden");
          savePasswordButton.textContent = "Create Password";
        }

        skeletonLoader.classList.add("hidden");
        accountArea.classList.remove("hidden");
      }
    });

    // Handle username update
    saveUsernameButton.addEventListener("click", async (event) => {
      event.preventDefault(); // Prevent form submission

      if (!app.online) {
        app.ui.alert(
          "You are offline. Please check your internet connection.",
          "warning",
          3000,
        );
        return;
      }

      saveUsernameButton.disabled = true; // Disable button during processing

      const newUsername = usernameInput.value;

      // Attempt to update username
      const response = await user.updateUsername(newUsername);
      if (response.status === "success") {
        app.ui.notification(
          "alert",
          response.message,
          "success",
          usernameForm,
          "username",
          true);
      } else {
        app.ui.notification(
          "alert",
          response.message,
          "error",
          usernameForm,
          "username",
          true);
      }

      saveUsernameButton.disabled = false; // Re-enable button after processing
    });

    // Handle email update
    saveEmailButton.addEventListener("click", async (event) => {
      event.preventDefault(); // Prevent form submission

      if (!app.online) {
        app.ui.alert(
          "You are offline. Please check your internet connection.",
          "warning",
          3000,
        );
        return;
      }

      saveEmailButton.disabled = true; // Disable button during processing

      const newEmail = emailInput.value;

      // Attempt to update email
      const response = await user.updateEmail(newEmail);
      if (response.status === "success") {
        app.ui.notification(
          "alert",
          response.message,
          "success",
          emailForm,
          "email",
          true);
      } else {
        app.ui.notification(
          "alert",
          response.message,
          "error",
          emailForm,
          "email",
          true);
      }

      saveEmailButton.disabled = false; // Re-enable button after processing
    });

    // Handle password update
    savePasswordButton.addEventListener("click", async (event) => {
      event.preventDefault(); // Prevent form submission

      if (!app.online) {
        app.ui.alert(
          "You are offline. Please check your internet connection.",
          "warning",
          3000,
        );
        return;
      }

      savePasswordButton.disabled = true; // Disable button during processing

      const currentPassword = currentPasswordInput.value;
      const newPassword = newPasswordInput.value;
      const confirmPassword = confirmPasswordInput.value;

      // Check if new password and confirm password match
      if (newPassword !== confirmPassword) {
        app.ui.notification(
          "alert",
          "New password and confirm password do not match.",
          "error",
          passwordForm,
          "password",
          true);
        savePasswordButton.disabled = false; // Re-enable button
        return;
      }

      // Attempt to update password
      const response = await user.updatePassword(currentPassword, newPassword);
      if (response.status === "success") {
        if (savePasswordButton.textContent === "Create Password") {
          savePasswordButton.textContent = "Update Password";
          currentPasswordInput.parentElement.classList.remove("hidden");
        }

        app.ui.notification(
          "alert",
          response.message,
          "success",
          passwordForm,
          "password",
          true);
      } else {
        if (response.error.code === "INVALID_NEW_PASSWORD") {
          app.ui.notification(
            "list",
            [
              "Password must be at least 8 characters long",
              "Password must contain at least one uppercase letter",
              "Password must contain at least one lowercase letter",
              "Password must contain at least one number",
              "Password must contain at least one special character",
            ],
            "error",
            passwordForm,
            "password",
            true
          );
        } else {
          app.ui.notification(
            "alert",
            response.message,
            "error",
            passwordForm,
            "password",
            true);
        }
      }

      savePasswordButton.disabled = false; // Re-enable button after processing
    });
  </script>
</body>

</html>