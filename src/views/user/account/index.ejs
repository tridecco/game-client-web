<!DOCTYPE html>
<html lang="en">

<head>
  <%- include("../../../partials/head.ejs") %>
  <title>Tridecco | Account Settings</title>
  <script src="<%= env.CDN_URL %>/js/user.js"></script>
</head>

<body class="h-screen overflow-hidden" style="background: #8e5e4d url('<%= env.CDN_URL %>/img/backgrounds/wooden-board.jpg') center center / cover no-repeat;">
  <!-- Tridecco Background Container -->
  <div id="board-container" class="absolute top-0 left-0 w-full h-full"></div>

  <!-- Background Overlay with Blur -->
  <div class="absolute inset-0 bg-black bg-opacity-50 backdrop-filter backdrop-blur-lg"></div>

  <!-- Main Layout Container -->
  <div class="fixed inset-0 flex flex-col h-screen text-gray-800 z-20">
    <!-- Main Content Flex Container -->
    <div class="flex flex-1 w-full h-full p-3 md:p-4 gap-3 md:gap-4 overflow-hidden max-w-7xl mx-auto z-10">
      <!-- Left Sidebar: Navigation -->
      <%- include("../../../partials/navigation-bar.ejs", { page: "account" }) %>

      <!-- Main Content Area -->
      <main class="flex-1 flex flex-col overflow-hidden">

        <!-- Mobile Top Bar: Back Button -->
        <header class="lg:hidden flex items-center bg-white/80 backdrop-blur-sm rounded-xl shadow-lg border border-amber-700/30 p-3 mb-3 flex-shrink-0">
          <a href="/more" class="p-2 rounded-full bg-amber-100/50 hover:bg-amber-200/70 border border-amber-300/50 text-amber-700 hover:text-amber-800 transition duration-200">
            <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7"></path>
            </svg>
          </a>
          <span class="ml-3 text-lg font-semibold text-amber-900">Account Settings</span>
        </header>

        <!-- Account Settings Content -->
        <section class="flex-1 bg-white/80 backdrop-blur-sm rounded-xl shadow-inner border border-amber-700/20 p-4 md:p-6 overflow-y-auto custom-scrollbar max-h-full">
          <h2 class="text-2xl font-bold mb-6 text-amber-900 hidden lg:block">Account Settings</h2>

          <!-- Skeleton Loader -->
          <div id="skeleton-loader" class="space-y-6">
            <!-- Skeleton for Change Username Section -->
            <div class="space-y-4">
              <div class="h-6 bg-gray-200 animate-pulse rounded w-1/3"></div>
              <div class="h-10 bg-gray-200 animate-pulse rounded"></div>
              <div class="h-10 bg-gray-200 animate-pulse rounded w-2/3"></div>
              <div class="h-8 bg-gray-200 animate-pulse rounded w-1/3"></div>
            </div>

            <hr class="border-amber-200">

            <!-- Skeleton for Change Email Section -->
            <div class="space-y-4">
              <div class="h-6 bg-gray-200 animate-pulse rounded w-1/3"></div>
              <div class="h-10 bg-gray-200 animate-pulse rounded"></div>
              <div class="h-10 bg-gray-200 animate-pulse rounded w-2/3"></div>
              <div class="h-6 bg-gray-200 animate-pulse rounded w-1/2"></div>
              <div class="h-8 bg-gray-200 animate-pulse rounded w-1/3"></div>
            </div>

            <hr class="border-amber-200">

            <!-- Skeleton for Change Password Section -->
            <div class="space-y-4">
              <div class="h-6 bg-gray-200 animate-pulse rounded w-1/3"></div>
              <div class="h-10 bg-gray-200 animate-pulse rounded"></div>
              <div class="h-10 bg-gray-200 animate-pulse rounded w-2/3"></div>
              <div class="h-10 bg-gray-200 animate-pulse rounded w-2/3"></div>
              <div class="h-8 bg-gray-200 animate-pulse rounded w-1/3"></div>
            </div>
          </div>

          <!-- Account Area -->
          <div id="account-area" class="space-y-8 hidden">

            <!-- Change Username Section -->
            <form id="username-form" class="space-y-4">
              <h3 class="text-lg font-semibold text-amber-800 border-b border-amber-300 pb-2">Change Username</h3>
              <div>
                <label for="username" class="block text-amber-800 text-sm font-bold mb-2">New Username</label>
                <input type="text" id="username" required class="border border-amber-400 rounded w-full py-2 px-3 text-gray-700 focus:outline-none focus:ring-2 focus:ring-amber-500" placeholder="Enter new username">
              </div>
              <div class="flex justify-end">
                <button id="save-username" class="bg-emerald-600 hover:bg-emerald-700 text-white font-bold py-2 px-5 rounded-md transition duration-200 text-sm">
                  Update Username
                </button>
              </div>
            </form>

            <hr class="border-amber-200">

            <!-- Change Email Section -->
            <form id="email-form" class="space-y-4">
              <h3 class="text-lg font-semibold text-amber-800 border-b border-amber-300 pb-2">Change Email</h3>
              <div>
                <label for="email" class="block text-amber-800 text-sm font-bold mb-2">New Email Address</label>
                <input type="email" id="email" required class="border border-amber-400 rounded w-full py-2 px-3 text-gray-700 focus:outline-none focus:ring-2 focus:ring-amber-500" placeholder="Enter new email address">
                <p class="text-xs text-gray-600 mt-1">A confirmation link will be sent to your new email address.</p>
              </div>
              <div class="flex justify-end">
                <button id="save-email" class="bg-emerald-600 hover:bg-emerald-700 text-white font-bold py-2 px-5 rounded-md transition duration-200 text-sm">
                  Update Email
                </button>
              </div>
            </form>

            <hr class="border-amber-200">

            <!-- Change Password Section -->
            <form id="password-form" class="space-y-4">
              <h3 class="text-lg font-semibold text-amber-800 border-b border-amber-300 pb-2">Change Password</h3>
              <div>
                <label for="current-password" class="block text-amber-800 text-sm font-bold mb-2">Current Password</label>
                <input type="password" id="current-password" required class="border border-amber-400 rounded w-full py-2 px-3 text-gray-700 focus:outline-none focus:ring-2 focus:ring-amber-500" placeholder="Enter your current password">
              </div>
              <div>
                <label for="new-password" class="block text-amber-800 text-sm font-bold mb-2">New Password</label>
                <input type="password" id="new-password" required class="border border-amber-400 rounded w-full py-2 px-3 text-gray-700 focus:outline-none focus:ring-2 focus:ring-amber-500" placeholder="Enter new password">
              </div>
              <div>
                <label for="confirm-password" class="block text-amber-800 text-sm font-bold mb-2">Confirm New Password</label>
                <input type="password" id="confirm-password" required class="border border-amber-400 rounded w-full py-2 px-3 text-gray-700 focus:outline-none focus:ring-2 focus:ring-amber-500" placeholder="Confirm new password">
              </div>
              <div class="flex justify-end">
                <button id="save-password" class="bg-emerald-600 hover:bg-emerald-700 text-white font-bold py-2 px-5 rounded-md transition duration-200 text-sm">
                  Update Password
                </button>
              </div>
            </form>

          </div>

          <!-- Load Error Content -->
          <%- include("../../../partials/load-error-content.ejs") %>
        </section>

      </main>
    </div>
  </div>

  <script>
    const accountArea = document.getElementById("account-area");
    const skeletonLoader = document.getElementById("skeleton-loader");

    const usernameForm = document.getElementById("username-form");
    const usernameInput = document.getElementById("username");
    const saveUsernameButton = document.getElementById("save-username");

    const emailForm = document.getElementById("email-form");
    const emailInput = document.getElementById("email");
    const saveEmailButton = document.getElementById("save-email");

    const passwordForm = document.getElementById("password-form");
    const currentPasswordInput = document.getElementById("current-password");
    const newPasswordInput = document.getElementById("new-password");
    const confirmPasswordInput = document.getElementById("confirm-password");
    const savePasswordButton = document.getElementById("save-password");

    const loadErrorContent = document.getElementById("load-error-content");
    const retryLoadButton = document.getElementById("retry-load-button");

    // Initialize user module
    const user = new User(app);

    // Load account settings
    function loadAccountSettings() {
      user.getUser().then((response) => {
        if (response.status === "success") {
          const user = response.data;

          usernameInput.value = user.username;
          emailInput.value = user.email;

          if (user.password === null) {
            currentPasswordInput.parentElement.classList.add("hidden");
            savePasswordButton.textContent = "Create Password";
          }

          skeletonLoader.classList.add("hidden");
          accountArea.classList.remove("hidden");
        } else {
          skeletonLoader.classList.add("hidden");
          accountArea.classList.add("hidden");
          loadErrorContent.classList.remove("hidden");
        }
      }).catch((error) => {
        skeletonLoader.classList.add("hidden");
        accountArea.classList.add("hidden");
        loadErrorContent.classList.remove("hidden");
      });
    }
    loadAccountSettings();

    // Retry loading account settings
    retryLoadButton.addEventListener("click", () => {
      loadErrorContent.classList.add("hidden");
      accountArea.classList.add("hidden");
      skeletonLoader.classList.remove("hidden");
      loadAccountSettings();
    });

    // Handle username update
    saveUsernameButton.addEventListener("click", async (event) => {
      event.preventDefault(); // Prevent form submission

      if (!app.online) {
        app.ui.alert(
          "You are offline. Please check your internet connection.",
          "warning",
          3000,
        );
        return;
      }

      saveUsernameButton.disabled = true; // Disable button during processing

      const newUsername = usernameInput.value;

      // Attempt to update username
      try {
        const response = await user.updateUsername(newUsername);
        if (response.status === "success") {
          app.ui.notification(
            "alert",
            response.message,
            "success",
            usernameForm,
            "username",
            true);
        } else {
          app.ui.notification(
            "alert",
            response.message,
            "error",
            usernameForm,
            "username",
            true);
        }
      } catch (error) {
        app.ui.notification(
          "alert",
          "An error occurred. Please try again.",
          "error",
          usernameForm,
          "username",
          true);
      }

      saveUsernameButton.disabled = false; // Re-enable button after processing
    });

    // Handle email update
    saveEmailButton.addEventListener("click", async (event) => {
      event.preventDefault(); // Prevent form submission

      if (!app.online) {
        app.ui.alert(
          "You are offline. Please check your internet connection.",
          "warning",
          3000,
        );
        return;
      }

      saveEmailButton.disabled = true; // Disable button during processing

      const newEmail = emailInput.value;

      // Attempt to update email
      try {
        const response = await user.updateEmail(newEmail);
        if (response.status === "success") {
          app.ui.notification(
            "alert",
            response.message,
            "success",
            emailForm,
            "email",
            true);
        } else {
          app.ui.notification(
            "alert",
            response.message,
            "error",
            emailForm,
            "email",
            true);
        }
      } catch (error) {
        app.ui.notification(
          "alert",
          "An error occurred. Please try again.",
          "error",
          usernameForm,
          "username",
          true);
      }

      saveEmailButton.disabled = false; // Re-enable button after processing
    });

    // Handle password update
    savePasswordButton.addEventListener("click", async (event) => {
      event.preventDefault(); // Prevent form submission

      if (!app.online) {
        app.ui.alert(
          "You are offline. Please check your internet connection.",
          "warning",
          3000,
        );
        return;
      }

      savePasswordButton.disabled = true; // Disable button during processing

      const currentPassword = currentPasswordInput.value;
      const newPassword = newPasswordInput.value;
      const confirmPassword = confirmPasswordInput.value;

      // Check if new password and confirm password match
      if (newPassword !== confirmPassword) {
        app.ui.notification(
          "alert",
          "New password and confirm password do not match.",
          "error",
          passwordForm,
          "password",
          true);
        savePasswordButton.disabled = false; // Re-enable button
        return;
      }

      // Attempt to update password
      try {
        const response = await user.updatePassword(currentPassword, newPassword);
        if (response.status === "success") {
          if (savePasswordButton.textContent === "Create Password") {
            savePasswordButton.textContent = "Update Password";
            currentPasswordInput.parentElement.classList.remove("hidden");
          }

          app.ui.notification(
            "alert",
            response.message,
            "success",
            passwordForm,
            "password",
            true);
        } else {
          if (response.error.code === "INVALID_NEW_PASSWORD") {
            app.ui.notification(
              "list",
              [
                "Password must be at least 8 characters long",
                "Password must contain at least one uppercase letter",
                "Password must contain at least one lowercase letter",
                "Password must contain at least one number",
                "Password must contain at least one special character",
              ],
              "error",
              passwordForm,
              "password",
              true
            );
          } else {
            app.ui.notification(
              "alert",
              response.message,
              "error",
              passwordForm,
              "password",
              true);
          }
        }
      } catch (error) {
        app.ui.notification(
          "alert",
          "An error occurred. Please try again.",
          "error",
          usernameForm,
          "username",
          true);
      }

      savePasswordButton.disabled = false; // Re-enable button after processing
    });
  </script>

  <%- include("../../../partials/tridecco-board-animator.ejs") %>
</body>

</html>