<!DOCTYPE html>
<html lang="en">

<head>
    <%- include("../components/head") %>
    <script src="/js/game-records.js"></script>
    <meta name="description" content="Tridecco match record page, where users can view detailed information about the match.">
    <title>Tridecco | Game Details</title>
    <script>
        (async () => {
            const sessionStatus = await app.session.check();
            if (sessionStatus.authenticated === true && sessionStatus.twoFactorAuthenticated === false) {
                window.location.href = "/two-factor-authentication";
            } else if (sessionStatus.authenticated === false) {
                window.location.href = "/login";
            }
        })();
    </script>
</head>

<body class="bg-gray-100 flex items-center justify-center min-h-screen relative">
    <div class="container mx-auto p-4 flex flex-col items-center justify-center">
        <!-- Return Button -->
        <a href="/" class="absolute top-4 left-4 text-gray-500 hover:text-indigo-600">
            ‚Üê Return to Home
        </a>

        <!-- Main Content -->
        <div class="w-full bg-white shadow-lg rounded-lg p-6">
            <!-- Match Info -->
            <h2 class="text-2xl font-bold text-gray-900 mb-4">Game Details</h2>
            <div id="match-info" class="grid grid-cols-2 gap-4 mb-6"></div>

            <!-- Player Rankings -->
            <h3 class="text-xl font-semibold text-gray-800 mb-4">Player Rankings</h3>
            <ul id="player-rankings" class="space-y-4 mb-6"></ul>

            <!-- Match Playback -->
            <h3 class="text-xl font-semibold text-gray-800 mb-4">Match Playback</h3>
            <div class="bg-gray-50 p-4 rounded-lg shadow-sm overflow-y-auto max-h-96">
                <ul id="match-playback" class="space-y-4"></ul>
            </div>
        </div>
    </div>

    <script>
        // Function to toggle JSON content
        function toggleJson(button) {
            const content = button.parentElement.nextElementSibling;
            if (content.classList.contains('hidden')) {
                content.classList.remove('hidden');
                button.textContent = 'Collapse';
            } else {
                content.classList.add('hidden');
                button.textContent = 'Expand';
            }
        }

        // Add event listener to window load
        window.addEventListener("DOMContentLoaded", async () => {
            // Set the game record ID
            const gameId = "<%= gameId %>";

            // New game records instance
            const gameRecords = new GameRecords(gameId);

            // Get game records details
            let gameDetails;
            try {
                gameDetails = await gameRecords.get();
            } catch (error) {
                // User not found
                window.location.href = "/404";
                return;
            }

            // Set match info
            document.getElementById("match-info").innerHTML = `
                <div>
                    <p class="text-gray-700"><strong>Status:</strong> ${gameDetails.matchStatus}</p>
                    <p class="text-gray-700"><strong>Mode:</strong> ${gameDetails.matchType}</p>
                </div>
                <div>
                    <p class="text-gray-700"><strong>Map:</strong> ${gameDetails.map}</p>
                    <p class="text-gray-700"><strong>Start Time:</strong> ${new Date(gameDetails.startTime).toLocaleTimeString()}</p>
                    <p class="text-gray-700"><strong>End Time:</strong> ${new Date(gameDetails.endTime).toLocaleTimeString()}</p>
                </div>
            `;

            // Set player rankings
            let players = [];
            let playerPromises = gameDetails.winners.map(async (winnerId) => {
                return await gameRecords.getUserData(winnerId);
            });

            // Wait for all player promises to resolve
            players = await Promise.all(playerPromises);

            // Render player rankings
            const playerRankings = document.getElementById("player-rankings");
            playerRankings.innerHTML = `
                ${players.map((player, index) => `
                    <li class="flex items-center bg-gradient-to-r from-gray-50 to-gray-100 p-4 rounded-lg shadow-sm">
                        <img src="${player.profile.avatar || "/img/default-avatar.png"}" alt="${player.username} Avatar" class="w-12 h-12 rounded-full mr-4">
                        <div class="flex-1">
                            <p onclick="window.location.href = '/users/${player.username}'" class="text-gray-800 font-semibold hover:text-indigo-600 cursor-pointer">${player.username}</p>
                        </div>
                        <span class="text-gray-600">${index + 1}st Place</span>
                    </li>
                `).join('')}
            `;

            // Set match playback
            const matchPlayback = document.getElementById("match-playback");
            matchPlayback.innerHTML = `
                ${gameDetails.operationRecords.map((record) => {
                if (record.playerId) {
                    return `
                            <li class="p-3 bg-white rounded-lg shadow-sm border border-gray-200">
                                <div class="flex items-center justify-between">
                                    <div class="flex items-center">
                                        <img src="${players.find(player => player._id === record.playerId).profile.avatar || "/img/default-avatar.png"}" alt="${players.find(player => player._id === record.playerId).username} Avatar" class="w-10 h-10 rounded-full mr-3">
                                        <div>
                                            <p class="text-gray-800 font-semibold">${players.find(player => player._id === record.playerId).username}</p>
                                            <p class="text-sm text-gray-500">${new Date(record.operationTime).toLocaleTimeString()}</p>
                                        </div>
                                    </div>
                                    <p class="text-gray-600 font-semibold">Event: ${record.operationType}</p>
                                    <button onclick="toggleJson(this)" class="text-indigo-600 text-sm hover:underline ml-3">Expand</button>
                                </div>
                                <div class="mt-3 hidden">
                                    <p class="text-gray-600"><strong>Data:</strong></p>
                                    <pre class="bg-gray-100 p-2 rounded text-sm text-gray-800 overflow-x-auto">${JSON.stringify(record.operationDetails, null, 2)}</pre>
                                </div>
                            </li>
                        `;
                } else {
                    return `
                            <li class="p-3 bg-white rounded-lg shadow-sm border border-gray-200">
                                <div class="flex items-center justify-between">
                                    <p class="text-gray-600 font-semibold">${new Date(record.operationTime).toLocaleTimeString()} - System Event: ${record.operationType}</p>
                                    <button onclick="toggleJson(this)" class="text-indigo-600 text-sm hover:underline ml-3">Expand</button>
                                </div>
                                <div class="mt-3 hidden">
                                    <p class="text-gray-600"><strong>Data:</strong></p>
                                    <pre class="bg-gray-100 p-2 rounded text-sm text-gray-800 overflow-x-auto">${JSON.stringify(record.operationDetails, null, 2)}</pre>
                                </div>
                            </li>
                        `;
                }
            }).join('')}
            `;
        });
    </script>
</body>

</html>