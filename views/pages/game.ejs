<!DOCTYPE html>
<html lang="en" class="h-full">

<head>
    <%- include("../components/head") %>
    <script src="/socket.io/socket.io.min.js"></script>
    <script src="/js/game.js"></script>
    <meta name="description" content="An online multiplayer board game using unique 13-sided pieces, inspired by Einstein's 2023 discovery. Players aim to dispose of all their pieces, forming hexagons of the same color with two-color Einstein shapes to earn extra turns, while preventing opponents from doing the same.">
    <title>Tridecco | Game</title>
    <script>
        (async () => {
            const sessionStatus = await app.session.check();
            if (sessionStatus.authenticated === true && sessionStatus.twoFactorAuthenticated === false) {
                window.location.href = "/two-factor-authentication";
            } else if (sessionStatus.authenticated === false) {
                window.location.href = "/login";
            }
        })();
    </script>
</head>

<body class="h-full">
    <main class="h-full">
        <div id="queue" class="h-full hidden">
            <%- include("../components/game/queue") %>
        </div>
        <div id="room" class="h-full hidden">
            <%- include("../components/game/room") %>
        </div>
        <div id="game" class="h-full hidden">
            <%- include("../components/game/game") %>
        </div>
        <div id="error" class="h-full hidden">
            <%- include("../components/game/error") %>
        </div>
    </main>
    <script>
        // Get the game parameters from the url, and remove them from the url
        function getGameParameters() {
            const url = new URL(window.location.href);
            const params = new URLSearchParams(url.search);

            window.history.replaceState({}, document.title, window.location.pathname);

            return params;
        }

        // Get the game parameters
        gameParameters = getGameParameters();
        const gameStartType = gameParameters.get("type");
        const gameMode = gameParameters.get("gameMode") || null;
        const roomId = gameParameters.get("roomId") || null;

        // Create a new game ui instance
        const gameUI = new GameUI();

        // Create a new game network instance
        const gameNetwork = new GameNetwork(app.serverUrl);

        (async () => {
            // Authenticate the user
            try {
                await gameNetwork.authenticate((await app.session.check()).sessionId);
            } catch (error) {
                if (error.message === "User can only have one active session") {
                    gameUI.showError("Already in a game", "You can only have one active game session at a time. Please close the other game session to start a new one.", null, () => {
                        window.location.href = "/";
                    }, "Back to Home");
                    return;
                }
                window.location.href = "/login";
            }

            // Show the correct game component
            if (gameStartType === "queue") {
                // Show the queue component
                gameUI.showQueue(gameMode);

                // Join the queue
                try {
                    await gameNetwork.joinQueue(gameMode);
                } catch (error) {
                    gameUI.showError("Error Joining Queue", error.message, null, () => {
                        window.location.reload();
                    }, "Retry");
                }

                // Start the queue timer
                const queueTimer = gameUI.startQueueWaitingTime();
            } else if (gameStartType === "join") {
                gameUI.showRoom();
            } else if (gameStartType === "create") {
                gameUI.showRoom();
            } else {
                window.location.href = "/";
            }
        })();
    </script>
</body>

</html>