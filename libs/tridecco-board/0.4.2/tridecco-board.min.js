!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t():"function"==typeof define&&define.amd?define([],t):"object"==typeof exports?exports.Tridecco=t():e.Tridecco=t()}(self,(()=>{return e={13:(e,t,i)=>{const s=i(114);class r{constructor(e,t={}){if(!Array.isArray(e))throw new Error("colors must be an array of strings");if(2!==e.length)throw new Error("colors must be an array of 2 strings representing the colors of the piece");if(e.some((e=>"string"!=typeof e)))throw new Error("colors must be an array of strings");if(t&&("object"!=typeof t||Array.isArray(t)))throw new Error("params must be an object and not an array");Object.assign(this,t),this.colors=e,this.colorsKey=e.join("-")}equals(e){return e instanceof r&&this.colorsKey===e.colorsKey}clone(){return s(this)}toJSON(){const e=this.clone(),{colors:t,colorsKey:i,...s}=e;return{colors:t,customProperties:s}}static fromJSON(e){const{colors:t,customProperties:i}=e;return new r(t,i)}}e.exports=r},114:e=>{e.exports=function e(t,i=new WeakMap){if(null===t)return t;if("object"!=typeof t)return t;if(i.has(t))return i.get(t);const s=t.constructor;switch(s){case Date:case RegExp:return new s(t);case Map:const r=new s;i.set(t,r);for(const[s,n]of t)r.set(e(s,i),e(n,i));return r;case Set:const n=new s;i.set(t,n);for(const s of t)n.add(e(s,i));return n;case Array:const o=new s(t.length);i.set(t,o);for(let s=0;s<t.length;s++)o[s]=e(t[s],i);return o;case Object:const a=Object.getPrototypeOf(t),h=Object.create(a);i.set(t,h);for(const s of Reflect.ownKeys(t)){const r=Object.getOwnPropertyDescriptor(t,s);r&&(r.get||r.set?Object.defineProperty(h,s,{get:r.get?()=>e(r.get.call(t),i):void 0,set:r.set?t=>r.set.call(h,e(t,i)):void 0,enumerable:r.enumerable,configurable:r.configurable}):h[s]=e(r.value,i))}return h;case Function:case Symbol:return t;case WeakMap:case WeakSet:return new s;case Promise:return new s(((s,r)=>{t.then((t=>s(e(t,i))),(t=>r(e(t,i))))}));default:if("function"==typeof t[Symbol.iterator]){const r=t[Symbol.iterator]();let n=r.next();const o=[];for(;!n.done;)o.push(e(n.value,i)),n=r.next();return new s(...o)}const d=Object.getPrototypeOf(t),l=null===d?Object.create(null):Object.create(d);i.set(t,l);for(const s of Reflect.ownKeys(t)){const r=Object.getOwnPropertyDescriptor(t,s);r&&(r.get||r.set?Object.defineProperty(l,s,{get:r.get?()=>e(r.get.call(t),i):void 0,set:r.set?t=>r.set.call(l,e(t,i)):void 0,enumerable:r.enumerable,configurable:r.configurable}):l[s]=e(r.value,i))}return l}}},303:(e,t,i)=>{const s=i(114),r=i(321),n=i(13),o=i(778);class a{constructor(e=o){if(!e)throw new Error("Map is required to initialize the board");if(!(e&&e.type&&e.columns&&e.rows&&e.positions))throw new Error("Invalid map provided");this.map=e,this.grid=new r(e.columns,e.rows,e.type),this.indexes=new Array(e.positions.length).fill(null),this.hexagons=new Set,this.hexagonColors=new Map,this.eventListeners={set:new Set,remove:new Set,form:new Set,destroy:new Set,clear:new Set},this._isCountingHexagons=!1,this.history=new Array}static POSITION_INDEXES={A:1,B:2,C:3,D:4,E:5,F:6,G:7,H:8};_triggerEvent(e,...t){if(this.eventListeners[e]){if(this._isCountingHexagons)return;this.eventListeners[e].forEach((e=>{e(...t)}))}}get(e){if(e<0||e>=this.map.positions.length)throw new Error("Index out of bounds");return this.indexes[e]}set(e,t){if(e<0||e>=this.map.positions.length)throw new Error("Index out of bounds");if(!(t instanceof n))throw new Error("Value must be an instance of Piece");const i=this.map.positions[e];this.indexes[e]=t;const s=this.getRelatedHexagons(e);this.grid.set([i[a.POSITION_INDEXES.A],i[a.POSITION_INDEXES.B],i[a.POSITION_INDEXES.C],i[a.POSITION_INDEXES.D]],t.colors[0]),this.grid.set([i[a.POSITION_INDEXES.E],i[a.POSITION_INDEXES.F],i[a.POSITION_INDEXES.G],i[a.POSITION_INDEXES.H]],t.colors[1]),s.forEach((e=>{const[t,i]=e.split("-").map(Number);this.isCompleteHexagon(t,i)&&(this.hexagons.add(`${t}-${i}`),this.hexagonColors.set(`${t}-${i}`,this.grid.getHexagon(t,i)[0]))})),this.history.push({op:"set",index:e}),this._triggerEvent("set",e,t)}place(e,t){if(e<0||e>=this.map.positions.length)throw new Error("Index out of bounds");if(this.indexes[e])throw new Error("Position already occupied");if(!(t instanceof n))throw new Error("Value must be an instance of Piece");const i=new Set(this.hexagons);this.set(e,t);const s=Array.from(this.hexagons).filter((e=>!i.has(e))),r=s.map((e=>({coordinate:e.split("-").map(Number),color:this.hexagonColors.get(e)})));return s.length>0&&this._triggerEvent("form",r),r}remove(e){if(e<0||e>=this.map.positions.length)throw new Error("Index out of bounds");const t=this.map.positions[e],i=this.getRelatedHexagons(e).filter((e=>!!this.hexagons.has(e)));this.grid.remove([t[a.POSITION_INDEXES.A],t[a.POSITION_INDEXES.B],t[a.POSITION_INDEXES.C],t[a.POSITION_INDEXES.D],t[a.POSITION_INDEXES.E],t[a.POSITION_INDEXES.F],t[a.POSITION_INDEXES.G],t[a.POSITION_INDEXES.H]]),i.forEach((e=>{this.hexagons.delete(e),this.hexagonColors.delete(e)})),this._triggerEvent("destroy",i.map((e=>e.split("-").map(Number))));const s=this.indexes[e];return this.history.push({op:"remove",index:e,value:s}),this.indexes[e]=null,this._triggerEvent("remove",e,s),s}getRelatedHexagons(e){if(e<0||e>=this.map.positions.length)throw new Error("Index out of bounds");const t=this.map.positions[e],i=new Set;for(let e=1;e<=a.POSITION_INDEXES.F;e++){const s=t[e];if(s){const e=`${s[0]}-${s[1]}`;i.add(e)}}return Array.from(i)}getRandomPosition(e=!1,t=[]){const i=new Set(t),s=[];return this.map.positions.forEach(((t,r)=>{i.has(r)||!e&&t.isEdge||s.push(r)})),0===s.length?-1:s[Math.floor(Math.random()*s.length)]}getEmptyPositions(){const e=[];return this.indexes.forEach(((t,i)=>{null===t&&e.push(i)})),e}getOccupiedPositions(){const e=this.getEmptyPositions(),t=new Set(e),i=[];return this.indexes.forEach(((e,s)=>{t.has(s)||i.push(s)})),i}getAdjacentPositions(){const e=this.getOccupiedPositions(),t=new Set;return e.forEach((e=>{this.map.positions[e].adjacents.forEach((e=>{t.add(e)}))})),Array.from(t)}getAvailablePositions(){const e=this.getEmptyPositions(),t=new Set(this.getAdjacentPositions());return e.filter((e=>t.has(e)))}getHexagonPositions(e){if(!(e instanceof n))throw new Error("Value must be an instance of Piece");const t=this.getAvailablePositions();return t.map((t=>[t,this.countHexagonsFormed(t,e)])).filter((e=>e[1]>0)).sort(((e,t)=>t[1]-e[1]))}countHexagonsFormed(e,t){if(e<0||e>=this.map.positions.length)throw new Error("Index out of bounds");if(!(t instanceof n))throw new Error("Value must be an instance of Piece");this._isCountingHexagons=!0;const i=this.place(e,t);return this.back(1),this._isCountingHexagons=!1,i.length}isEmpty(e){if(e<0||e>=this.map.positions.length)throw new Error("Index out of bounds");return null===this.indexes[e]}isCompleteHexagon(e,t){if(e<0||e>=this.map.columns||t<0||t>=this.map.rows)throw new Error("Column or row out of bounds");const i=this.grid.getHexagon(e,t);for(let e=1;e<i.length;e++)if(null===i[e]||null===i[e-1]||i[e]!==i[e-1])return!1;return!0}getCompleteHexagons(){return Array.from(this.hexagons).map((e=>({coordinate:e.split("-").map(Number),color:this.hexagonColors.get(e)})))}addEventListener(e,t){if(!this.eventListeners[e])throw new Error("Invalid event type");this.eventListeners[e].add(t)}removeEventListener(e,t){if(!this.eventListeners[e])throw new Error("Invalid event type");this.eventListeners[e].delete(t)}back(e=1){if(e<=0)return 0;e=Math.min(e,this.history.length);for(let t=0;t<e;t++){const e=this.history.pop();if(!e)break;"set"===e.op?(this.remove(e.index),this.history.pop()):"remove"===e.op&&this.set(e.index,e.value)}return e}clone(e={}){const{withListeners:t=!1,withHistory:i=!1}=e,r=s(this);return t||(r.eventListeners={set:new Set,remove:new Set,form:new Set,destroy:new Set,clear:new Set}),i||(r.history=[]),r._isCountingHexagons=!1,r}clear(){this.grid.clear(),this.indexes.fill(null),this.hexagons.clear(),this.hexagonColors.clear(),this.history=[],this._triggerEvent("clear")}toJSON(e={}){const{withHistory:t=!1}=e,i=this.clone({withListeners:!1,withHistory:t}),{map:s,grid:r,hexagons:n,hexagonColors:o}=i;return{map:s,grid:r,indexes:i.indexes.map((e=>e?e.toJSON():null)),hexagons:Array.from(n),hexagonColors:Array.from(o.entries()),history:t?i.history.map((e=>"set"===e.op?e:"remove"===e.op?{op:e.op,index:e.index,value:e.value.toJSON()}:e)):[]}}static fromJSON(e){const{map:t,grid:i,indexes:s,hexagons:r,hexagonColors:o,history:h}=e,d=new a(t);return d.grid=i,d.hexagons=new Set(r),d.hexagonColors=new Map(o),d.indexes=s.map((e=>e?n.fromJSON(e):null)),d.history=h.map((e=>"set"===e.op?e:"remove"===e.op?{op:e.op,index:e.index,value:n.fromJSON(e.value)}:e)),d}}e.exports=a},321:(e,t,i)=>{const s=i(330);class r extends s{constructor(e,t,i){super(e,t,i)}get(e,t,i){if(i<1||i>6)throw new Error("Triangle index must be between 1 and 6");const s=super.get(e,t);return s&&s.triangles[String(i)]||null}set(e,t){e.forEach((([e,i,s])=>{if(s<1||s>6)throw new Error("Triangle index must be between 1 and 6");const r=super.get(e,i)||{triangles:{}};r.triangles[String(s)]=t,super.set(e,i,r)}))}remove(e){return e.map((([e,t,i])=>{if(i<1||i>6)throw new Error("Triangle index must be between 1 and 6");const s=super.get(e,t);if(!s)return null;const r=s.triangles[String(i)]||null;return delete s.triangles[String(i)],0===Object.keys(s.triangles).length?super.set(e,t,null):super.set(e,t,s),r}))}getHexagon(e,t){const i=super.get(e,t);return i?Array.from({length:6},((e,t)=>i.triangles[String(t+1)]||null)):Array(6).fill(null)}setHexagon(e,t,i){const s=super.get(e,t)||{triangles:{}};i.forEach(((e,t)=>{s.triangles[String(t+1)]=e})),super.set(e,t,s)}removeHexagon(e,t){const i=super.get(e,t);if(!i)return Array(6).fill(null);const s=Array.from({length:6},((e,t)=>i.triangles[String(t+1)]||null));return super.set(e,t,null),s}isFull(e,t){const i=super.get(e,t);return!!i&&6===Object.keys(i.triangles).length}clone(){const e=new r(this.columns,this.rows,this.type);return e.grid=this.grid.map((e=>e.map((e=>{if(!e)return null;const t={triangles:{}};return Object.keys(e.triangles).forEach((i=>{t.triangles[i]=e.triangles[i]})),t})))),e}}e.exports=r},330:e=>{class t{constructor(e,t,i){if(!["odd-r","even-r","odd-q","even-q"].includes(i))throw new Error("Invalid grid type");this.type=i,this.grid=new Array(t);for(let i=0;i<t;i++)this.grid[i]=new Array(e).fill(null)}static OFFSET={NEGATIVE_ONE:-1,ZERO:0,ONE:1};static DIRECTION_OFFSETS={UP_LEFT:[t.OFFSET.NEGATIVE_ONE,t.OFFSET.NEGATIVE_ONE],UP:[t.OFFSET.ZERO,t.OFFSET.NEGATIVE_ONE],UP_RIGHT:[t.OFFSET.ONE,t.OFFSET.NEGATIVE_ONE],RIGHT:[t.OFFSET.ONE,t.OFFSET.ZERO],DOWN_RIGHT:[t.OFFSET.ONE,t.OFFSET.ONE],DOWN:[t.OFFSET.ZERO,t.OFFSET.ONE],DOWN_LEFT:[t.OFFSET.NEGATIVE_ONE,t.OFFSET.ONE],LEFT:[t.OFFSET.NEGATIVE_ONE,t.OFFSET.ZERO]};static DIRECTIONS={"odd-r":[[t.DIRECTION_OFFSETS.UP_LEFT,t.DIRECTION_OFFSETS.UP,t.DIRECTION_OFFSETS.RIGHT,t.DIRECTION_OFFSETS.DOWN,t.DIRECTION_OFFSETS.DOWN_LEFT,t.DIRECTION_OFFSETS.LEFT],[t.DIRECTION_OFFSETS.UP,t.DIRECTION_OFFSETS.UP_RIGHT,t.DIRECTION_OFFSETS.RIGHT,t.DIRECTION_OFFSETS.DOWN_RIGHT,t.DIRECTION_OFFSETS.DOWN,t.DIRECTION_OFFSETS.LEFT]],"even-r":[[t.DIRECTION_OFFSETS.UP,t.DIRECTION_OFFSETS.UP_RIGHT,t.DIRECTION_OFFSETS.RIGHT,t.DIRECTION_OFFSETS.DOWN_RIGHT,t.DIRECTION_OFFSETS.DOWN,t.DIRECTION_OFFSETS.LEFT],[t.DIRECTION_OFFSETS.UP_LEFT,t.DIRECTION_OFFSETS.UP,t.DIRECTION_OFFSETS.RIGHT,t.DIRECTION_OFFSETS.DOWN,t.DIRECTION_OFFSETS.DOWN_LEFT,t.DIRECTION_OFFSETS.LEFT]],"odd-q":[[t.DIRECTION_OFFSETS.UP,t.DIRECTION_OFFSETS.UP_RIGHT,t.DIRECTION_OFFSETS.RIGHT,t.DIRECTION_OFFSETS.DOWN,t.DIRECTION_OFFSETS.LEFT,t.DIRECTION_OFFSETS.UP_LEFT],[t.DIRECTION_OFFSETS.UP,t.DIRECTION_OFFSETS.RIGHT,t.DIRECTION_OFFSETS.DOWN_RIGHT,t.DIRECTION_OFFSETS.DOWN,t.DIRECTION_OFFSETS.DOWN_LEFT,t.DIRECTION_OFFSETS.LEFT]],"even-q":[[t.DIRECTION_OFFSETS.UP,t.DIRECTION_OFFSETS.RIGHT,t.DIRECTION_OFFSETS.DOWN_RIGHT,t.DIRECTION_OFFSETS.DOWN,t.DIRECTION_OFFSETS.DOWN_LEFT,t.DIRECTION_OFFSETS.LEFT],[t.DIRECTION_OFFSETS.UP,t.DIRECTION_OFFSETS.UP_RIGHT,t.DIRECTION_OFFSETS.RIGHT,t.DIRECTION_OFFSETS.DOWN,t.DIRECTION_OFFSETS.LEFT,t.DIRECTION_OFFSETS.UP_LEFT]]};get(e,t){return t<0||t>=this.grid.length||e<0||e>=this.grid[t].length?null:this.grid[t][e]}set(e,t,i){t<0||t>=this.grid.length||e<0||e>=this.grid[t].length||(this.grid[t][e]=i)}remove(e,t){if(t<0||t>=this.grid.length||e<0||e>=this.grid[t].length)return null;const i=this.grid[t][e];return this.grid[t][e]=null,i}getAdjacents(e,i){const s=t.DIRECTIONS[this.type];if(!s)throw new Error("Invalid grid type");const r=[],n=(this.type.includes("r")?i:e)%2!=0?s[1]:s[0];for(const[t,s]of n){const n=e+t,o=i+s,a=this.get(n,o);null!==a&&r.push({col:n,row:o,value:a})}return r}forEach(e){for(let t=0;t<this.grid.length;t++)for(let i=0;i<this.grid[t].length;i++)e(this.get(i,t),i,t)}clone(){const e=new t(this.grid[0].length,this.grid.length,this.type);for(let t=0;t<this.grid.length;t++)for(let i=0;i<this.grid[t].length;i++)e.set(i,t,this.get(i,t));return e}clear(){for(let e=0;e<this.grid.length;e++)for(let t=0;t<this.grid[e].length;t++)this.grid[e][t]=null}}e.exports=t},331:e=>{e.exports={height:1e3,width:1e3,tiles:[{x:55,y:62,width:160,rotation:60,flipped:!1},{x:180,y:99,width:160,rotation:120,flipped:!1},{x:294,y:81,width:160,rotation:180,flipped:!1},{x:388,y:63,width:160,rotation:60,flipped:!1},{x:532,y:76,width:160,rotation:240,flipped:!1},{x:628,y:82,width:160,rotation:180,flipped:!1},{x:741,y:135,width:160,rotation:300,flipped:!1},{x:805,y:76,width:160,rotation:120,flipped:!0},{x:45,y:152,width:160,rotation:0,flipped:!0},{x:126,y:178,width:160,rotation:180,flipped:!1},{x:240,y:232,width:160,rotation:300,flipped:!1},{x:306,y:173,width:160,rotation:120,flipped:!0},{x:377,y:227,width:160,rotation:180,flipped:!1},{x:430,y:148,width:160,rotation:120,flipped:!1},{x:543,y:200,width:160,rotation:0,flipped:!1},{x:638,y:208,width:160,rotation:60,flipped:!1},{x:781,y:220,width:160,rotation:240,flipped:!1},{x:44,y:297,width:160,rotation:0,flipped:!1},{x:139,y:304,width:160,rotation:60,flipped:!1},{x:281,y:317,width:160,rotation:240,flipped:!1},{x:378,y:324,width:160,rotation:180,flipped:!1},{x:490,y:280,width:160,rotation:300,flipped:!1},{x:573,y:327,width:160,rotation:300,flipped:!1},{x:657,y:293,width:160,rotation:240,flipped:!0},{x:740,y:326,width:160,rotation:300,flipped:!1},{x:823,y:376,width:160,rotation:300,flipped:!1},{x:45,y:393,width:160,rotation:0,flipped:!1},{x:118,y:448,width:160,rotation:300,flipped:!0},{x:181,y:390,width:160,rotation:120,flipped:!1},{x:295,y:441,width:160,rotation:0,flipped:!1},{x:388,y:448,width:160,rotation:60,flipped:!1},{x:472,y:400,width:160,rotation:60,flipped:!1},{x:614,y:413,width:160,rotation:240,flipped:!1},{x:710,y:419,width:160,rotation:180,flipped:!1},{x:34,y:558,width:160,rotation:240,flipped:!1},{x:130,y:538,width:160,rotation:0,flipped:!1},{x:243,y:520,width:160,rotation:300,flipped:!1},{x:307,y:592,width:160,rotation:60,flipped:!1},{x:377,y:538,width:160,rotation:0,flipped:!0},{x:461,y:563,width:160,rotation:180,flipped:!1},{x:512,y:485,width:160,rotation:120,flipped:!1},{x:575,y:616,width:160,rotation:300,flipped:!1},{x:627,y:538,width:160,rotation:0,flipped:!1},{x:711,y:564,width:160,rotation:180,flipped:!0},{x:781,y:509,width:160,rotation:240,flipped:!1},{x:15,y:678,width:160,rotation:120,flipped:!1},{x:129,y:634,width:160,rotation:0,flipped:!1},{x:225,y:640,width:160,rotation:60,flipped:!1},{x:378,y:682,width:160,rotation:0,flipped:!1},{x:472,y:688,width:160,rotation:60,flipped:!1},{x:617,y:701,width:160,rotation:240,flipped:!1},{x:700,y:653,width:160,rotation:240,flipped:!1},{x:793,y:660,width:160,rotation:180,flipped:!1},{x:58,y:832,width:160,rotation:60,flipped:!1},{x:100,y:726,width:160,rotation:120,flipped:!1},{x:182,y:760,width:160,rotation:60,flipped:!0},{x:265,y:726,width:160,rotation:120,flipped:!1},{x:348,y:774,width:160,rotation:120,flipped:!1},{x:430,y:808,width:160,rotation:60,flipped:!0},{x:513,y:773,width:160,rotation:120,flipped:!1},{x:598,y:822,width:160,rotation:120,flipped:!1},{x:710,y:777,width:160,rotation:0,flipped:!1},{x:806,y:785,width:160,rotation:60,flipped:!1}],hexagons:{"1-1":{x:111,y:103,width:110},"1-2":{x:111,y:201,width:110},"1-3":{x:111,y:297,width:110},"1-4":{x:111,y:393,width:110},"1-5":{x:111,y:489,width:110},"1-6":{x:111,y:586,width:110},"1-7":{x:111,y:681,width:110},"1-8":{x:111,y:778,width:110},"1-9":{x:111,y:872,width:110},"2-1":{x:194,y:152,width:110},"2-2":{x:194,y:248,width:110},"2-3":{x:194,y:344,width:110},"2-4":{x:194,y:441,width:110},"2-5":{x:194,y:537,width:110},"2-6":{x:194,y:634,width:110},"2-7":{x:194,y:730,width:110},"3-1":{x:277,y:104,width:110},"3-2":{x:277,y:200,width:110},"3-3":{x:277,y:296,width:110},"3-4":{x:277,y:393,width:110},"3-5":{x:277,y:489,width:110},"3-6":{x:277,y:586,width:110},"3-7":{x:277,y:681,width:110},"3-8":{x:277,y:778,width:110},"4-1":{x:360,y:152,width:110},"4-2":{x:360,y:248,width:110},"4-3":{x:360,y:344,width:110},"4-4":{x:360,y:441,width:110},"4-5":{x:360,y:537,width:110},"4-6":{x:360,y:634,width:110},"4-7":{x:360,y:730,width:110},"5-1":{x:443,y:104,width:110},"5-2":{x:443,y:200,width:110},"5-3":{x:443,y:296,width:110},"5-4":{x:443,y:393,width:110},"5-5":{x:443,y:489,width:110},"5-6":{x:443,y:586,width:110},"5-7":{x:443,y:681,width:110},"5-8":{x:443,y:778,width:110},"6-1":{x:526,y:152,width:110},"6-2":{x:526,y:248,width:110},"6-3":{x:526,y:344,width:110},"6-4":{x:526,y:441,width:110},"6-5":{x:526,y:537,width:110},"6-6":{x:526,y:634,width:110},"6-7":{x:526,y:730,width:110},"6-8":{x:526,y:826,width:110},"7-1":{x:609,y:104,width:110},"7-2":{x:609,y:200,width:110},"7-3":{x:609,y:296,width:110},"7-4":{x:609,y:393,width:110},"7-5":{x:609,y:489,width:110},"7-6":{x:609,y:586,width:110},"7-7":{x:609,y:681,width:110},"7-8":{x:609,y:778,width:110},"8-1":{x:693,y:152,width:110},"8-2":{x:693,y:248,width:110},"8-3":{x:693,y:344,width:110},"8-4":{x:693,y:441,width:110},"8-5":{x:693,y:537,width:110},"8-6":{x:693,y:634,width:110},"8-7":{x:693,y:730,width:110},"9-1":{x:776,y:104,width:110},"9-2":{x:776,y:200,width:110},"9-3":{x:776,y:296,width:110},"9-4":{x:776,y:393,width:110},"9-5":{x:776,y:489,width:110},"9-6":{x:776,y:586,width:110},"9-7":{x:776,y:681,width:110},"9-8":{x:776,y:778,width:110}}}},492:(e,t,i)=>{const s="https://cdn.jsdelivr.net/gh/tridecco/game-board@0.4.2/assets/",r=i(303),n=i(705),o=i(331),a=-1;e.exports=class{constructor({board:e,container:t,map:i=o,texturesUrl:n=s+"textures/classic/normal",backgroundUrl:a=s+"backgrounds/wooden-board.jpg",gridUrl:h=s+"grids/black.png"},d=()=>{}){if(!(e instanceof r))throw new Error("board must be an instance of Board");if(!(t instanceof HTMLElement))throw new Error("canvas must be an instance of HTMLElement");if(!(i&&i.height&&i.width&&i.tiles&&i.tiles.length&&i.hexagons))throw new Error("map must be a valid map object");if("string"!=typeof n)throw new Error("texturesUrl must be a string representing the URL of the texture pack");if("string"!=typeof a)throw new Error("backgroundUrl must be a string");if("string"!=typeof h)throw new Error("gridUrl must be a string");if("function"!=typeof d)throw new Error("callback must be a function");if("undefined"==typeof window)throw new Error("Renderer can only be used in a browser environment");this.board=e,this.map=i,this.container=t,this.container.style.position="relative",this.canvas=document.createElement("canvas"),this.context=this.canvas.getContext("2d"),this.width=null,this.height=null,this.ratio=this.map.width/this.map.height,this.widthRatio=null,this.heightRatio=null,this.devicePixelRatio=window.devicePixelRatio||1,this.offScreenCanvases={background:new OffscreenCanvas(1,1),pieces:new OffscreenCanvas(1,1),piecesPreview:new OffscreenCanvas(1,1),mask:new OffscreenCanvas(1,1),hitmap:new OffscreenCanvas(1,1),temp:new OffscreenCanvas(1,1)},this.offScreenContexts={background:this.offScreenCanvases.background.getContext("2d"),pieces:this.offScreenCanvases.pieces.getContext("2d"),piecesPreview:this.offScreenCanvases.piecesPreview.getContext("2d"),mask:this.offScreenCanvases.mask.getContext("2d"),hitmap:this.offScreenCanvases.hitmap.getContext("2d",{willReadFrequently:!0,initialImageSmoothingEnabled:!1,imageSmoothingEnabled:!1}),temp:this.offScreenCanvases.temp.getContext("2d",{willReadFrequently:!0,initialImageSmoothingEnabled:!1,imageSmoothingEnabled:!1})},this.background=null,this.grid=null,this.textures=null,this.requestedFrames=new Set,this.resizeObserverInitialized=!1,this.resizeObserver=new ResizeObserver((()=>{this.resizeObserverInitialized?this.requestedFrames.has("resize")||(this.requestedFrames.add("resize"),requestAnimationFrame((()=>{this._setUpCanvas(),this.requestedFrames.delete("resize")})),this._triggerEvent("resize",{canvas:{width:this.canvas.width,height:this.canvas.height},container:{width:this.container.clientWidth,height:this.container.clientHeight}})):this.resizeObserverInitialized=!0})),this.resizeObserver.observe(this.container),this.eventListeners={dragover:new Set,dragoverAvailable:new Set,drop:new Set,dropAvailable:new Set,mousemove:new Set,mousemoveAvailable:new Set,click:new Set,clickAvailable:new Set,resize:new Set},this._initEventListeners(),this.eventHandlers=new Map,this.mutationObserver=new MutationObserver(((e,t)=>{for(const t of e)t.removedNodes&&t.removedNodes.forEach((e=>{e!==this.canvas&&e!==this.container||this.destroy()}))})),this.mutationObserver.observe(this.container.parentNode||this.container,{childList:!0,subtree:!0}),this._isPreviewing=!1,this._isShowingAvailablePositions=!1,this._showingAvailablePositions=new Array,this._previewingPositions=new Map,this._setUpBoard(),this._loadAssets(n,a,h).then((()=>{this._setUpCanvas(),d(this)})),this.isDestroyed=!1}_initEventListeners(){this.canvas.addEventListener("dragover",(e=>{const t=this.devicePixelRatio,i={x:e.offsetX*t,y:e.offsetY*t};e.preventDefault(),this._triggerEvent("dragover",this._getPieceFromCoordinate(i.x,i.y));const s=this._getPieceFromCoordinate(i.x,i.y,!0);s!==a&&this._triggerEvent("dragoverAvailable",s)})),this.canvas.addEventListener("drop",(e=>{const t=this.devicePixelRatio,i={x:e.offsetX*t,y:e.offsetY*t};e.preventDefault(),this._triggerEvent("drop",this._getPieceFromCoordinate(i.x,i.y));const s=this._getPieceFromCoordinate(i.x,i.y,!0);s!==a&&this._triggerEvent("dropAvailable",s)})),this.canvas.addEventListener("click",(e=>{const t=this.devicePixelRatio,i={x:e.offsetX*t,y:e.offsetY*t};this._triggerEvent("click",this._getPieceFromCoordinate(i.x,i.y));const s=this._getPieceFromCoordinate(i.x,i.y,!0);s!==a&&this._triggerEvent("clickAvailable",s)})),this.canvas.addEventListener("mousemove",(e=>{const t=this.devicePixelRatio,i={x:e.offsetX*t,y:e.offsetY*t};this._triggerEvent("mousemove",this._getPieceFromCoordinate(i.x,i.y));const s=this._getPieceFromCoordinate(i.x,i.y,!0);s!==a&&this._triggerEvent("mousemoveAvailable",s)}))}_triggerEvent(e,...t){this.eventListeners[e]&&this.eventListeners[e].forEach((e=>{e(...t)}))}_setUpBoard(){const e=function(e,t){this._renderPiece(e,t.colorsKey,this.map.tiles[e].flipped),this._render()}.bind(this),t=function(){this._renderPiecesAndHexagons(),this._render()}.bind(this),i=function(e){for(const t of e)this._renderHexagon(t.coordinate,t.color);this._render()}.bind(this),s=function(){this._clearBoard(),this._render()}.bind(this);this.board.addEventListener("set",e),this.board.addEventListener("remove",t),this.board.addEventListener("form",i),this.board.addEventListener("destroy",t),this.board.addEventListener("clear",s),this.eventHandlers.set("set",e),this.eventHandlers.set("remove",t),this.eventHandlers.set("form",i),this.eventHandlers.set("destroy",t),this.eventHandlers.set("clear",s)}async _loadAssets(e,t,i){const s=[new Promise((t=>{this.textures=new n(e,t)})),new Promise((e=>{this.background=new Image,this.background.src=t,this.background.onload=e})),new Promise((e=>{this.grid=new Image,this.grid.src=i,this.grid.onload=e}))];return Promise.all(s)}_setUpCanvas(){const e=this.container.clientWidth,t=this.container.clientHeight,i=this.ratio;let s,r;e/t>i?(r=t,s=r*i):(s=e,r=s/i);const n=this.devicePixelRatio;this.canvas.width=s*n,this.canvas.height=r*n,this.canvas.style.width=`${s}px`,this.canvas.style.height=`${r}px`;const o=(e-s)/2,a=(t-r)/2;this.canvas.style.position="absolute",this.canvas.style.left=`${o}px`,this.canvas.style.top=`${a}px`,this.canvas.parentNode||this.container.appendChild(this.canvas);for(const e in this.offScreenCanvases)this.offScreenCanvases[e].width=s*n,this.offScreenCanvases[e].height=r*n;this.context.scale(n,n);for(const e in this.offScreenContexts)this.offScreenContexts[e].scale(n,n);this.width=s,this.height=r,this.widthRatio=s/this.map.width,this.heightRatio=r/this.map.height,this._clearAllCanvases(),this._renderBackgroundAndGrid(),this.board.indexes.length&&this._renderPiecesAndHexagons(),this._isShowingAvailablePositions&&this.showAvailablePositions(this._showingAvailablePositions),this._isPreviewing&&this._previewingPositions.forEach(((e,t)=>{this.previewPiece(t,e)})),this._setUpHitmap(),this._render()}_render(){this.requestedFrames.has("render")||(requestAnimationFrame((()=>{this.context.clearRect(0,0,this.canvas.width,this.canvas.height),this.context.drawImage(this.offScreenCanvases.background,0,0,this.width,this.height),this.context.drawImage(this.offScreenCanvases.pieces,0,0,this.width,this.height),this.context.drawImage(this.offScreenCanvases.piecesPreview,0,0,this.width,this.height),this.context.drawImage(this.offScreenCanvases.mask,0,0,this.width,this.height),this.requestedFrames.delete("render")})),this.requestedFrames.add("render"))}_renderBackgroundAndGrid(){const e=this.offScreenContexts.background;e.clearRect(0,0,this.offScreenCanvases.background.width,this.offScreenCanvases.background.height);const t=this.background.width/this.background.height;let i,s,r,n;this.width/this.height>t?(i=this.width,s=this.width/t,r=0,n=(this.height-s)/2):(s=this.height,i=this.height*t,r=(this.width-i)/2,n=0),e.drawImage(this.background,r,n,i,s);const o=this.grid.width/this.grid.height;let a,h,d,l;this.width/this.height>o?(h=this.height,a=this.height*o,d=(this.width-a)/2,l=0):(a=this.width,h=this.width/o,d=0,l=(this.height-h)/2),e.drawImage(this.grid,d,l,a,h)}_renderPiecesAndHexagons(){this._clearBoard(),this._renderPieces(),this._renderHexagons()}_renderPieces(){const e=this.board.indexes;for(let t=0;t<e.length;t++){const i=e[t];if(i){const e=this.map.tiles[t].flipped;this._renderPiece(t,i.colorsKey,e)}}}_renderPiece(e,t,i,s=this.offScreenContexts.pieces,r){const n=this.map.tiles[e];if(!n)throw new Error(`Tile index ${e} out of bounds`);const o=i?`${t}-flipped`:t,a=this.textures.get("tiles",o);if(!a)throw new Error(`Texture key "${o}" not found in textures`);const h=n.x*this.widthRatio,d=n.y*this.heightRatio,l=a.width,c=a.height;let g,w;if(void 0!==n.width&&null!==n.width?(g=n.width*this.widthRatio,w=void 0!==n.height&&null!==n.height?n.height*this.heightRatio:g*c/l):void 0!==n.height&&null!==n.height?(w=n.height*this.heightRatio,g=w*l/c):(g=l*(this.widthRatio||1),w=c*(this.heightRatio||1)),!(g>0&&w>0))return;const f=(n.rotation||0)*Math.PI/180;if(s.save(),s.translate(h+g/2,d+w/2),s.rotate(f),r){const e=this.offScreenCanvases.temp,t=this.offScreenContexts.temp;e.width=Math.max(1,Math.ceil(g)),e.height=Math.max(1,Math.ceil(w)),t.drawImage(a,0,0,e.width,e.height),t.globalCompositeOperation="source-in",t.fillStyle=r,t.fillRect(0,0,e.width,e.height),t.globalCompositeOperation="source-over",s.drawImage(e,-g/2,-w/2,g,w)}else s.drawImage(a,-g/2,-w/2,g,w);s.restore()}_renderHexagons(){const e=this.board.getCompleteHexagons();for(const t of e)this._renderHexagon(t.coordinate,t.color)}_renderHexagon(e,t){const i=this.map.hexagons[`${e[0]}-${e[1]}`],s=this.textures.get("hexagons",t),r=i.x*this.widthRatio,n=i.y*this.heightRatio,o=s.width,a=s.height,h=i.width?i.width*this.widthRatio:i.height*this.heightRatio*o/a,d=i.height?i.height*this.heightRatio:i.width*this.widthRatio*a/o;this.offScreenContexts.pieces.drawImage(s,r,n,h,d)}_clearAllCanvases(){this.context.clearRect(0,0,this.canvas.width,this.canvas.height);for(const e in this.offScreenCanvases)this.offScreenContexts[e].clearRect(0,0,this.offScreenCanvases[e].width,this.offScreenCanvases[e].height)}_clearBoard(){this.offScreenContexts.pieces.clearRect(0,0,this.offScreenCanvases.pieces.width,this.offScreenCanvases.pieces.height)}_setUpHitmap(){this.offScreenContexts.hitmap.clearRect(0,0,this.offScreenCanvases.hitmap.width,this.offScreenCanvases.hitmap.height);const e=this.board.map.positions.map(((e,t)=>t));for(const t of e){const e=10*t+1;if(e>16777215){console.warn(`Gapped ID ${e} for index ${t} exceeds limit.`);continue}const i=`rgb(${255&e}, ${e>>8&255}, ${e>>16&255})`;this._renderPiece(t,"empty",this.map.tiles[t].flipped,this.offScreenContexts.hitmap,i)}}_getPieceFromCoordinate(e,t,i=!1){const s=this.offScreenContexts.hitmap.getImageData(e,t,1,1).data,r=s[0],n=s[1],o=s[2];if(0===s[3])return a;const h=r|n<<8|o<<16;if(0===h)return a;if((h-1)%10!=0)return a;const d=(h-1)/10;return d>=0&&d<this.board.map.positions.length?i&&!new Set(this.board.getAvailablePositions()).has(d)?a:d:a}previewPiece(e,t,i="rgba(255, 255, 255, 0.5)"){if(!t||!t.colorsKey)throw new Error("Invalid piece object for preview");const s=this.map.tiles[e];if(!s)throw new Error("Tile index out of bounds for preview");this._renderPiece(e,t.colorsKey,s.flipped,this.offScreenContexts.piecesPreview),this._renderPiece(e,t.colorsKey,s.flipped,this.offScreenContexts.piecesPreview,i),this._render(),this._isPreviewing=!0,this._previewingPositions.set(e,t)}clearPreview(){this.offScreenContexts.piecesPreview.clearRect(0,0,this.offScreenCanvases.piecesPreview.width,this.offScreenCanvases.piecesPreview.height),this._render(),this._isPreviewing=!1,this._previewingPositions.clear()}showAvailablePositions(e=this.board.getAvailablePositions(),t="rgba(0, 0, 0, 0.5)"){if(!Array.isArray(e))throw new Error("positions must be an array of available position indexes");this._isShowingAvailablePositions&&this.clearAvailablePositions();const i=this.offScreenContexts.mask;i.fillStyle=t,i.fillRect(0,0,this.offScreenCanvases.mask.width,this.offScreenCanvases.mask.height);for(const t of e){const e=this.map.tiles[t];if(!e)continue;const s=this.textures.get("tiles",this.map.tiles[t].flipped?"empty-flipped":"empty"),r=e.x*this.widthRatio,n=e.y*this.heightRatio,o=s.width,a=s.height;let h,d;if(void 0!==e.width&&null!==e.width?(h=e.width*this.widthRatio,d=void 0!==e.height&&null!==e.height?e.height*this.heightRatio:h*a/o):void 0!==e.height&&null!==e.height?(d=e.height*this.heightRatio,h=d*o/a):(h=o*(this.widthRatio||1),d=a*(this.heightRatio||1)),!(h>0&&d>0))continue;const l=(e.rotation||0)*Math.PI/180;i.save(),i.translate(r+h/2,n+d/2),i.rotate(l),i.globalCompositeOperation="destination-out",i.drawImage(s,-h/2,-d/2,h,d),i.restore()}this._render(),this._isShowingAvailablePositions=!0,this._showingAvailablePositions=e}clearAvailablePositions(){this.offScreenContexts.mask.clearRect(0,0,this.offScreenCanvases.mask.width,this.offScreenCanvases.mask.height),this._render(),this._isShowingAvailablePositions=!1,this._showingAvailablePositions=[]}getTexture(e,t){if(!this.textures)throw new Error("Textures not loaded yet");return this.textures.get(e,t)}updateBoard(e){if(!(e instanceof r))throw new Error("newBoard must be a valid board instance");this.board.removeEventListener("set",this.eventHandlers.get("set")),this.board.removeEventListener("remove",this.eventHandlers.get("remove")),this.board.removeEventListener("form",this.eventHandlers.get("form")),this.board.removeEventListener("destroy",this.eventHandlers.get("destroy")),this.board.removeEventListener("clear",this.eventHandlers.get("clear")),this.eventHandlers.clear(),this.board=e,this._setUpBoard(),this._setUpCanvas()}updateMap(e){if(!(e&&e.height&&e.width&&e.tiles&&e.tiles.length&&e.hexagons))throw new Error("newMap must be a valid map object");this.map=e,this.ratio=this.map.width/this.map.height,this.board.removeEventListener("set",this.eventHandlers.get("set")),this.board.removeEventListener("remove",this.eventHandlers.get("remove")),this.board.removeEventListener("form",this.eventHandlers.get("form")),this.board.removeEventListener("destroy",this.eventHandlers.get("destroy")),this.board.removeEventListener("clear",this.eventHandlers.get("clear")),this.eventHandlers.clear(),this._setUpBoard(),this._setUpCanvas()}async updateTextures(e){if("string"!=typeof e)throw new Error("texturesUrl must be a string representing the URL of the texture pack");return new Promise(((t,i)=>{this.textures=new n(e,(()=>{if(this._renderPiecesAndHexagons(),this._render(),this._setUpHitmap(),this._isPreviewing){const e=[...this._previewingPositions];this.clearPreview(),e.forEach((([e,t])=>{this.previewPiece(e,t)}))}t()}),(e=>{console.error("Error loading new texture pack:",e),i(new Error("Failed to load new texture pack"))}))}))}async updateBackground(e){if("string"!=typeof e)throw new Error("backgroundUrl must be a string");return new Promise(((t,i)=>{const s=new Image;s.src=e,s.onload=()=>{this.background=s,this._renderBackgroundAndGrid(),this._render(),t()},s.onerror=e=>{console.error("Error loading new background image:",e),i(new Error("Failed to load new background image"))}}))}async updateGrid(e){if("string"!=typeof e)throw new Error("gridUrl must be a string");return new Promise(((t,i)=>{const s=new Image;s.src=e,s.onload=()=>{this.grid=s,this._renderBackgroundAndGrid(),this._render(),t()},s.onerror=e=>{console.error("Error loading new grid image:",e),i(new Error("Failed to load new grid image"))}}))}addEventListener(e,t,i={}){if(!this.eventListeners[e]||e.endsWith("Available"))throw new Error("Invalid event type");"resize"!==e&&i.onlyAvailable?this.eventListeners[`${e}Available`].add(t):this.eventListeners[e].add(t)}removeEventListener(e,t){if(!this.eventListeners[e]||e.endsWith("Available"))throw new Error("Invalid event type");this.eventListeners[e].delete(t),"resize"!==e&&this.eventListeners[`${e}Available`].delete(t)}destroy(){if(!this.isDestroyed){this.board.removeEventListener("set",this.eventHandlers.get("set")),this.board.removeEventListener("remove",this.eventHandlers.get("remove")),this.board.removeEventListener("form",this.eventHandlers.get("form")),this.board.removeEventListener("destroy",this.eventHandlers.get("destroy")),this.board.removeEventListener("clear",this.eventHandlers.get("clear")),this.eventHandlers.clear();for(const e in this.eventListeners)this.eventListeners[e].clear();this._clearAllCanvases(),this.resizeObserver&&this.resizeObserver.disconnect(),this.mutationObserver&&this.mutationObserver.disconnect(),this.canvas.parentNode&&this.container.removeChild(this.canvas),this.canvas=null,this.context=null;for(const e in this.offScreenCanvases)this.offScreenCanvases[e]=null,this.offScreenContexts[e]=null;this.offScreenCanvases=null,this.offScreenContexts=null,this.board=null,this.map=null,this.container=null,this.background=null,this.grid=null,this.textures=null,this.resizeObserverInitialized=!1,this.requestedFrames.clear(),this.requestedFrames=null,this.eventListeners=null,this._isPreviewing=!1,this._isShowingAvailablePositions=!1,this._showingAvailablePositions=null,this._previewingPositions.clear(),this._previewingPositions=null,this.isDestroyed=!0}}}},705:e=>{e.exports=class{constructor(e,t=()=>{}){if("string"!=typeof e)throw new Error("texturesUrl must be a string representing the URL of the texture pack");if("function"!=typeof t)throw new Error("callback must be a function");if("undefined"==typeof window)throw new Error("TexturePack can only be used in a browser environment");this.textures={tiles:new Map,hexagons:new Map},this.loadTextures(e,t)}loadTextures(e,t){fetch(`${e}/index.json`).then((t=>{if(!t.ok)throw new Error(`Failed to fetch texture index from ${e}`);return t.json()})).then((i=>{const s=i.tiles||{},r=i.hexagons||{},n=Object.entries(s).map((([t,i])=>new Promise(((s,r)=>{const n=new Image;n.crossOrigin="anonymous",n.src=`${e}/${i}`,n.onload=()=>{this.textures.tiles.set(t,n),s()},n.onerror=()=>{r(new Error(`Failed to load tile texture: ${i}`))}})))),o=Object.entries(r).map((([t,i])=>new Promise(((s,r)=>{const n=new Image;n.crossOrigin="anonymous",n.src=`${e}/${i}`,n.onload=()=>{this.textures.hexagons.set(t,n),s()},n.onerror=()=>{r(new Error(`Failed to load hexagon texture: ${i}`))}}))));Promise.all([...n,...o]).then((()=>{t(this)})).catch((e=>{console.error("Error loading textures:",e),t(null,e)}))})).catch((e=>{console.error("Error fetching texture index:",e),t(null,e)}))}get(e,t){return"tiles"===e?this.textures.tiles.get(t)||null:"hexagons"===e?this.textures.hexagons.get(t)||null:(console.error(`Invalid texture type: ${e}`),null)}}},778:e=>{e.exports={type:"even-q",columns:11,rows:10,positions:[{1:[1,0,6],2:[1,0,5],3:[0,0,3],4:[0,0,4],5:[1,1,6],6:[1,1,1],7:[1,1,2],8:[1,1,3],adjacents:[1,8],isEdge:!0},{1:[3,1,1],2:[3,1,6],3:[2,0,4],4:[2,0,5],5:[2,1,1],6:[2,1,2],7:[2,1,3],8:[2,1,4],adjacents:[0,2,9,10],isEdge:!0},{1:[4,1,2],2:[4,1,1],3:[4,0,5],4:[4,0,6],5:[3,1,2],6:[3,1,3],7:[3,1,4],8:[3,1,5],adjacents:[1,3,10,11],isEdge:!0},{1:[5,0,6],2:[5,0,5],3:[4,0,3],4:[4,0,4],5:[5,1,6],6:[5,1,1],7:[5,1,2],8:[5,1,3],adjacents:[2,4,13],isEdge:!0},{1:[6,1,3],2:[6,1,2],3:[7,1,6],4:[7,1,1],5:[6,0,3],6:[6,0,4],7:[6,0,5],8:[6,0,6],adjacents:[3,5,13,14],isEdge:!0},{1:[8,1,2],2:[8,1,1],3:[8,0,5],4:[8,0,6],5:[7,1,2],6:[7,1,3],7:[7,1,4],8:[7,1,5],adjacents:[4,6,14,15],isEdge:!0},{1:[8,1,4],2:[8,1,3],3:[9,2,1],4:[9,2,2],5:[9,1,4],6:[9,1,5],7:[9,1,6],8:[9,1,1],adjacents:[5,7,15,16],isEdge:!0},{1:[10,1,6],2:[10,1,1],3:[9,1,3],4:[9,1,2],5:[10,0,6],6:[10,0,5],7:[10,0,4],8:[10,0,3],adjacents:[6],isEdge:!0},{1:[1,1,4],2:[1,1,5],3:[1,2,1],4:[1,2,6],5:[0,1,4],6:[0,1,3],7:[0,1,2],8:[0,1,1],adjacents:[0,9],isEdge:!0},{1:[2,2,2],2:[2,2,1],3:[2,1,5],4:[2,1,6],5:[1,2,2],6:[1,2,3],7:[1,2,4],8:[1,2,5],adjacents:[1,8,10,17,18],isEdge:!0},{1:[2,2,4],2:[2,2,3],3:[3,3,1],4:[3,3,2],5:[3,2,4],6:[3,2,5],7:[3,2,6],8:[3,2,1],adjacents:[1,2,9,11,18,19],isEdge:!1},{1:[4,2,6],2:[4,2,1],3:[3,2,3],4:[3,2,2],5:[4,1,6],6:[4,1,5],7:[4,1,4],8:[4,1,3],adjacents:[2,10,12,13],isEdge:!1},{1:[5,3,2],2:[5,3,1],3:[5,2,5],4:[5,2,6],5:[4,2,2],6:[4,2,3],7:[4,2,4],8:[4,2,5],adjacents:[11,13,19,20,21],isEdge:!1},{1:[6,1,1],2:[6,1,6],3:[5,1,4],4:[5,1,5],5:[5,2,1],6:[5,2,2],7:[5,2,3],8:[5,2,4],adjacents:[3,4,11,12,14,21],isEdge:!1},{1:[6,1,5],2:[6,1,4],3:[6,2,2],4:[6,2,3],5:[7,2,5],6:[7,2,6],7:[7,2,1],8:[7,2,2],adjacents:[4,5,13,15,21,22],isEdge:!1},{1:[8,1,6],2:[8,1,5],3:[7,2,3],4:[7,2,4],5:[8,2,6],6:[8,2,1],7:[8,2,2],8:[8,2,3],adjacents:[5,6,14,16,23,24],isEdge:!1},{1:[9,3,3],2:[9,3,2],3:[10,2,6],4:[10,2,1],5:[9,2,3],6:[9,2,4],7:[9,2,5],8:[9,2,6],adjacents:[6,15,24,25],isEdge:!0},{1:[0,2,5],2:[0,2,4],3:[0,3,2],4:[0,3,3],5:[1,3,5],6:[1,3,6],7:[1,3,1],8:[1,3,2],adjacents:[9,18,26],isEdge:!0},{1:[2,2,6],2:[2,2,5],3:[1,3,3],4:[1,3,4],5:[2,3,6],6:[2,3,1],7:[2,3,2],8:[2,3,3],adjacents:[9,10,17,19,26,28],isEdge:!1},{1:[3,4,3],2:[3,4,2],3:[4,3,6],4:[4,3,1],5:[3,3,3],6:[3,3,4],7:[3,3,5],8:[3,3,6],adjacents:[10,12,18,20,28,29],isEdge:!1},{1:[5,4,2],2:[5,4,1],3:[5,3,5],4:[5,3,6],5:[4,3,2],6:[4,3,3],7:[4,3,4],8:[4,3,5],adjacents:[12,19,21,29,30,31],isEdge:!1},{1:[5,3,4],2:[5,3,3],3:[6,3,1],4:[6,3,2],5:[6,2,4],6:[6,2,5],7:[6,2,6],8:[6,2,1],adjacents:[12,13,14,20,22,31],isEdge:!1},{1:[6,3,4],2:[6,3,3],3:[7,4,1],4:[7,4,2],5:[7,3,4],6:[7,3,5],7:[7,3,6],8:[7,3,1],adjacents:[14,21,23,31,32],isEdge:!1},{1:[7,3,2],2:[7,3,3],3:[8,2,5],4:[8,2,4],5:[8,3,2],6:[8,3,1],7:[8,3,6],8:[8,3,5],adjacents:[15,22,24,32],isEdge:!1},{1:[8,3,4],2:[8,3,3],3:[9,4,1],4:[9,4,2],5:[9,3,4],6:[9,3,5],7:[9,3,6],8:[9,3,1],adjacents:[15,16,23,25,33],isEdge:!1},{1:[9,4,4],2:[9,4,3],3:[10,4,1],4:[10,4,2],5:[10,3,4],6:[10,3,5],7:[10,3,6],8:[10,3,1],adjacents:[16,24,33],isEdge:!0},{1:[0,3,5],2:[0,3,4],3:[0,4,2],4:[0,4,3],5:[1,4,5],6:[1,4,6],7:[1,4,1],8:[1,4,2],adjacents:[17,18,27],isEdge:!0},{1:[1,4,3],2:[1,4,4],3:[2,4,6],4:[2,4,5],5:[1,5,3],6:[1,5,2],7:[1,5,1],8:[1,5,6],adjacents:[26,28,35],isEdge:!0},{1:[3,4,1],2:[3,4,6],3:[2,3,4],4:[2,3,5],5:[2,4,1],6:[2,4,2],7:[2,4,3],8:[2,4,4],adjacents:[18,19,27,29,35,36],isEdge:!1},{1:[3,4,5],2:[3,4,4],3:[3,5,2],4:[3,5,3],5:[4,4,5],6:[4,4,6],7:[4,4,1],8:[4,4,2],adjacents:[19,20,28,30,36,38],isEdge:!1},{1:[5,4,6],2:[5,4,5],3:[4,4,3],4:[4,4,4],5:[5,5,6],6:[5,5,1],7:[5,5,2],8:[5,5,3],adjacents:[20,29,31,38,40],isEdge:!1},{1:[6,3,6],2:[6,3,5],3:[5,4,3],4:[5,4,4],5:[6,4,6],6:[6,4,1],7:[6,4,2],8:[6,4,3],adjacents:[20,21,22,30,32,40],isEdge:!1},{1:[7,5,3],2:[7,5,2],3:[8,4,6],4:[8,4,1],5:[7,4,3],6:[7,4,4],7:[7,4,5],8:[7,4,6],adjacents:[22,23,31,33,40,42],isEdge:!1},{1:[9,5,2],2:[9,5,1],3:[9,4,5],4:[9,4,6],5:[8,4,2],6:[8,4,3],7:[8,4,4],8:[8,4,5],adjacents:[24,25,32,42,44],isEdge:!0},{1:[0,6,3],2:[0,6,2],3:[1,6,6],4:[1,6,1],5:[0,5,3],6:[0,5,4],7:[0,5,5],8:[0,5,6],adjacents:[35,45,46],isEdge:!0},{1:[1,5,5],2:[1,5,4],3:[1,6,2],4:[1,6,3],5:[2,5,5],6:[2,5,6],7:[2,5,1],8:[2,5,2],adjacents:[27,28,34,36,46],isEdge:!1},{1:[2,5,4],2:[2,5,3],3:[3,6,1],4:[3,6,2],5:[3,5,4],6:[3,5,5],7:[3,5,6],8:[3,5,1],adjacents:[28,29,35,37,46,47],isEdge:!1},{1:[4,5,6],2:[4,5,5],3:[3,6,3],4:[3,6,4],5:[4,6,6],6:[4,6,1],7:[4,6,2],8:[4,6,3],adjacents:[36,38,39,47,48],isEdge:!1},{1:[5,5,4],2:[5,5,5],3:[5,6,1],4:[5,6,6],5:[4,5,4],6:[4,5,3],7:[4,5,2],8:[4,5,1],adjacents:[29,30,37,39],isEdge:!1},{1:[6,6,2],2:[6,6,1],3:[6,5,5],4:[6,5,6],5:[5,6,2],6:[5,6,3],7:[5,6,4],8:[5,6,5],adjacents:[37,38,40,41,48,49],isEdge:!1},{1:[7,5,1],2:[7,5,6],3:[6,4,4],4:[6,4,5],5:[6,5,1],6:[6,5,2],7:[6,5,3],8:[6,5,4],adjacents:[30,31,32,39,41,42],isEdge:!1},{1:[6,6,4],2:[6,6,3],3:[7,7,1],4:[7,7,2],5:[7,6,4],6:[7,6,5],7:[7,6,6],8:[7,6,1],adjacents:[39,40,42,49,50,51],isEdge:!1},{1:[7,5,5],2:[7,5,4],3:[7,6,2],4:[7,6,3],5:[8,5,5],6:[8,5,6],7:[8,5,1],8:[8,5,2],adjacents:[32,33,40,41,43,44],isEdge:!1},{1:[8,6,1],2:[8,6,2],3:[8,5,4],4:[8,5,3],5:[9,6,1],6:[9,6,6],7:[9,6,5],8:[9,6,4],adjacents:[42,44,51,52],isEdge:!1},{1:[9,6,3],2:[9,6,2],3:[10,5,6],4:[10,5,1],5:[9,5,3],6:[9,5,4],7:[9,5,5],8:[9,5,6],adjacents:[33,42,43],isEdge:!0},{1:[1,7,1],2:[1,7,6],3:[0,6,4],4:[0,6,5],5:[0,7,1],6:[0,7,2],7:[0,7,3],8:[0,7,4],adjacents:[34,46,53,54],isEdge:!0},{1:[1,6,5],2:[1,6,4],3:[1,7,2],4:[1,7,3],5:[2,6,5],6:[2,6,6],7:[2,6,1],8:[2,6,2],adjacents:[34,35,36,45,47,54],isEdge:!1},{1:[3,6,6],2:[3,6,5],3:[2,6,3],4:[2,6,4],5:[3,7,6],6:[3,7,1],7:[3,7,2],8:[3,7,3],adjacents:[36,37,46,48,55,56],isEdge:!1},{1:[4,6,5],2:[4,6,4],3:[4,7,2],4:[4,7,3],5:[5,7,5],6:[5,7,6],7:[5,7,1],8:[5,7,2],adjacents:[37,39,47,49,56,57],isEdge:!1},{1:[6,6,6],2:[6,6,5],3:[5,7,3],4:[5,7,4],5:[6,7,6],6:[6,7,1],7:[6,7,2],8:[6,7,3],adjacents:[39,41,48,50,58,59],isEdge:!1},{1:[7,8,3],2:[7,8,2],3:[8,7,6],4:[8,7,1],5:[7,7,3],6:[7,7,4],7:[7,7,5],8:[7,7,6],adjacents:[41,49,51,59,60,61],isEdge:!1},{1:[8,7,3],2:[8,7,2],3:[9,7,6],4:[9,7,1],5:[8,6,3],6:[8,6,4],7:[8,6,5],8:[8,6,6],adjacents:[41,43,50,52,61],isEdge:!1},{1:[10,7,2],2:[10,7,1],3:[10,6,5],4:[10,6,6],5:[9,7,2],6:[9,7,3],7:[9,7,4],8:[9,7,5],adjacents:[43,51,61,62],isEdge:!0},{1:[1,8,6],2:[1,8,5],3:[0,8,3],4:[0,8,4],5:[1,9,6],6:[1,9,1],7:[1,9,2],8:[1,9,3],adjacents:[45,54],isEdge:!0},{1:[2,7,1],2:[2,7,6],3:[1,7,4],4:[1,7,5],5:[1,8,1],6:[1,8,2],7:[1,8,3],8:[1,8,4],adjacents:[45,46,53,55],isEdge:!0},{1:[3,8,5],2:[3,8,6],3:[2,8,2],4:[2,8,3],5:[2,7,5],6:[2,7,4],7:[2,7,3],8:[2,7,2],adjacents:[47,54,56],isEdge:!0},{1:[4,7,1],2:[4,7,6],3:[3,7,4],4:[3,7,5],5:[3,8,1],6:[3,8,2],7:[3,8,3],8:[3,8,4],adjacents:[47,48,55,57],isEdge:!0},{1:[5,8,1],2:[5,8,6],3:[4,7,4],4:[4,7,5],5:[4,8,1],6:[4,8,2],7:[4,8,3],8:[4,8,4],adjacents:[48,56,58],isEdge:!0},{1:[6,8,5],2:[6,8,6],3:[5,9,2],4:[5,9,1],5:[5,8,5],6:[5,8,4],7:[5,8,3],8:[5,8,2],adjacents:[49,57,59],isEdge:!0},{1:[7,8,1],2:[7,8,6],3:[6,7,4],4:[6,7,5],5:[6,8,1],6:[6,8,2],7:[6,8,3],8:[6,8,4],adjacents:[49,50,58,60],isEdge:!0},{1:[8,8,1],2:[8,8,6],3:[7,8,4],4:[7,8,5],5:[7,9,1],6:[7,9,2],7:[7,9,3],8:[7,9,4],adjacents:[50,59,61],isEdge:!0},{1:[8,7,5],2:[8,7,4],3:[8,8,2],4:[8,8,3],5:[9,8,5],6:[9,8,6],7:[9,8,1],8:[9,8,2],adjacents:[50,51,52,60,62],isEdge:!0},{1:[10,7,6],2:[10,7,5],3:[9,8,3],4:[9,8,4],5:[10,8,6],6:[10,8,1],7:[10,8,2],8:[10,8,3],adjacents:[52,61],isEdge:!0}]}},931:(e,t,i)=>{e.exports={HexGrid:i(330),TriHexGrid:i(321),Board:i(303),Piece:i(13),maps:{board:{default:i(778)},renderer:{default:i(331)}},TexturePack:i(705),Renderer:i(492)}}},t={},function i(s){var r=t[s];if(void 0!==r)return r.exports;var n=t[s]={exports:{}};return e[s](n,n.exports,i),n.exports}(931);var e,t}));